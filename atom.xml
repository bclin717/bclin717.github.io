<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BC 的日常筆記</title>
  
  <subtitle>What I cannot create, I do not understand.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bclin.tw/"/>
  <updated>2022-10-04T15:54:05.125Z</updated>
  <id>https://bclin.tw/</id>
  
  <author>
    <name>BC Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Binary Search 二分搜尋法</title>
    <link href="https://bclin.tw/2022/06/26/binary-search/"/>
    <id>https://bclin.tw/2022/06/26/binary-search/</id>
    <published>2022-06-26T21:23:00.000Z</published>
    <updated>2022-10-04T15:54:05.125Z</updated>
    
    <content type="html"><![CDATA[<p>Binary Search 大概是很多人學習演算法的入門題（或是 Bubble Sort？），Binary Search 的觀念很簡單，透過每次減半搜尋空間來達到 O(logN) 的時間複雜度，但其細節和變形的用法確非常多。<br>實作上只要一個邊界設錯，結果就會大不同。刷題的時候總是讓人覺得很煩燥。但只要題目要求搜尋要比 O(N) 快，幾乎是肯定一定要實作 Binary Search 了。</p>        <h1 id="基本用法"   >          <a href="#基本用法" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1>      <p>最基礎的 Binary Search 用法，程式碼如下。<br>如果有找到則回傳 index，沒有的話回傳 -1（回傳 left 則是最接近的位置）。</p>        <h2 id="參考題目：LeetCode-35-Search-Insert-Position"   >          <a href="#參考題目：LeetCode-35-Search-Insert-Position" class="heading-link"><i class="fas fa-link"></i></a><a href="#參考題目：LeetCode-35-Search-Insert-Position" class="headerlink" title="參考題目：LeetCode - 35. Search Insert Position"></a>參考題目：<span class="exturl"><a class="exturl__link"   href="https://leetcode.com/problems/search-insert-position/"  target="_blank" rel="noopener">LeetCode - 35. Search Insert Position</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">                r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h2 id="參考題目：LeetCode-278-First-Bad-Version"   >          <a href="#參考題目：LeetCode-278-First-Bad-Version" class="heading-link"><i class="fas fa-link"></i></a><a href="#參考題目：LeetCode-278-First-Bad-Version" class="headerlink" title="參考題目：LeetCode - 278. First Bad Version"></a>參考題目：<span class="exturl"><a class="exturl__link"   href="https://leetcode.com/problems/first-bad-version/"  target="_blank" rel="noopener">LeetCode - 278. First Bad Version</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(isBadVersion(mid)) &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h2 id="mid-的算法"   >          <a href="#mid-的算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#mid-的算法" class="headerlink" title="mid 的算法"></a>mid 的算法</h2>      <p>或許你會好奇為什麼計算中點的部分，要使用</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br></pre></td></tr></table></div></figure><p>而不是使用下面比較簡潔的寫法</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid = (r+l)/<span class="number">2</span>;</span><br></pre></td></tr></table></div></figure><p>這是因為，如果 r+l 有可能會超過他們本來資料型態的最大值。<br>若 r 與 l 都是 int，那 r+l 很有可能超出 <code>2^31–1</code></p>        <h1 id="有序但值重複"   >          <a href="#有序但值重複" class="heading-link"><i class="fas fa-link"></i></a><a href="#有序但值重複" class="headerlink" title="有序但值重複"></a>有序但值重複</h1>      <p>有一種情況是，雖然陣列有排序，但值是重複的。這種情況通常會需要找出</p><ol><li>找出「大於或等於」某值的「最小值」的位置 - lower_bound() in C++</li><li>找出「大於」某值的「最小值」的位置 - upper_bound() in C++</li></ol>        <h2 id="參考題目：LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"   >          <a href="#參考題目：LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="heading-link"><i class="fas fa-link"></i></a><a href="#參考題目：LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="參考題目：LeetCode - 34. Find First and Last Position of Element in Sorted Array"></a>參考題目：<span class="exturl"><a class="exturl__link"   href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"  target="_blank" rel="noopener">LeetCode - 34. Find First and Last Position of Element in Sorted Array</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>這一題其實是變相要你設計 C++ 中的 lower_bound 與 upper_bound（儘管需要減 1）。<br>至於為何搜尋右邊界時，需要將 target+1 再將結果 -1，我們可以用範例來思考。<br>例如，範例 [5,7,7,8,8,10] 中，如果我們尋找 9，會得到 10 的位置，這時候再減去 1，就得到 8 的右邊界位置了。</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!binary_search(nums.begin(), nums.end(), target)) <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;; </span><br><span class="line">        <span class="keyword">int</span> l = lower_bound(nums, target);</span><br><span class="line">        <span class="keyword">int</span> r = lower_bound(nums, target+<span class="number">1</span>)<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt;= target) &#123;</span><br><span class="line">                r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h1 id="非排序"   >          <a href="#非排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#非排序" class="headerlink" title="非排序"></a>非排序</h1>      <p>有時候會遇到題目搜尋一個特別設計過的陣列，這個陣列雖然沒有排序過，但顯然與題目存在某種關係。</p>        <h2 id="參考題目：LeetCode-162-Find-Peak-Element"   >          <a href="#參考題目：LeetCode-162-Find-Peak-Element" class="heading-link"><i class="fas fa-link"></i></a><a href="#參考題目：LeetCode-162-Find-Peak-Element" class="headerlink" title="參考題目：LeetCode - 162. Find Peak Element"></a>參考題目：<span class="exturl"><a class="exturl__link"   href="https://leetcode.com/problems/find-peak-element/"  target="_blank" rel="noopener">LeetCode - 162. Find Peak Element</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>題目設計了一個陣列是部分排序的，只要回傳任一高點即可。<br>以前面提過的寫法，如果條件設成 <code>l &lt;= r</code> 會多出很多邊界條件要處理，因為這一題需要判斷兩個點位的關係。</p>        <h3 id="寫法一"   >          <a href="#寫法一" class="heading-link"><i class="fas fa-link"></i></a><a href="#寫法一" class="headerlink" title="寫法一"></a>寫法一</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + (r - l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; nums[mid+<span class="number">1</span>]) &#123;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h3 id="寫法二"   >          <a href="#寫法二" class="heading-link"><i class="fas fa-link"></i></a><a href="#寫法二" class="headerlink" title="寫法二"></a>寫法二</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = nums.size()<span class="number">-2</span>, n = nums.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(nums[<span class="number">0</span>] &gt; nums[<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[n<span class="number">-1</span>] &gt; nums[n<span class="number">-2</span>]) <span class="keyword">return</span> n<span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; nums[mid+<span class="number">1</span>]) &#123;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h2 id="參考題目：LeetCode-33-Search-in-Rotated-Sorted-Array"   >          <a href="#參考題目：LeetCode-33-Search-in-Rotated-Sorted-Array" class="heading-link"><i class="fas fa-link"></i></a><a href="#參考題目：LeetCode-33-Search-in-Rotated-Sorted-Array" class="headerlink" title="參考題目：LeetCode - 33. Search in Rotated Sorted Array"></a>參考題目：<span class="exturl"><a class="exturl__link"   href="https://leetcode.com/problems/search-in-rotated-sorted-array/"  target="_blank" rel="noopener">LeetCode - 33. Search in Rotated Sorted Array</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>這題與前一題有點類似，也是特別設計過，沒有排序但部分排序的題目。<br>和前一題一樣，按照題目的要求去切每一種狀況做判斷。</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) </span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= nums[left]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; nums[mid] &gt; target) </span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; nums[right] &gt;= target) </span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Binary Search 大概是很多人學習演算法的入門題（或是 Bubble Sort？），Binary Search 的觀念很簡單，透過每次減半搜尋空間來達到 O(logN) 的時間複雜度，但其細節和變形的用法確非常多。&lt;br&gt;實作上只要一個邊界設錯，結果就會大不同。刷題的時候總是讓人覺得很煩燥。但只要題目要求搜尋要比 O(N) 快，幾乎是肯定一定要實作 Binary Search 了。&lt;/p&gt;

        &lt;h1 id=&quot;基本用法&quot;&gt;
          &lt;a href=&quot;#基本用法&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h1&gt;
      &lt;p&gt;最基礎的 Binary Search 用法，程式碼如下。&lt;br&gt;如果有找到則回傳 index，沒有的話回傳 -1（回傳 left 則是最接近的位置）。&lt;/p&gt;

        &lt;h2 id=&quot;參考題目：LeetCode-35-Search-Insert-Position&quot;&gt;
          &lt;a href=&quot;#參考題目：LeetCode-35-Search-Insert-Position&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#參考題目：LeetCode-35-Search-Insert-Position&quot; class=&quot;headerlink&quot; title=&quot;參考題目：LeetCode - 35. Search Insert Position&quot;&gt;&lt;/a&gt;參考題目：&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://leetcode.com/problems/search-insert-position/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode - 35. Search Insert Position&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
      &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;searchInsert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, r = nums.size()&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (l &amp;lt;= r) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = l + (r-l)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nums[mid] &amp;gt; target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                r = mid&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nums[mid] &amp;lt; target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                l = mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; l;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://bclin.tw/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Binary Tree Traversal 的方法</title>
    <link href="https://bclin.tw/2022/01/11/tree-traversal/"/>
    <id>https://bclin.tw/2022/01/11/tree-traversal/</id>
    <published>2022-01-11T21:23:00.000Z</published>
    <updated>2022-10-04T15:54:05.129Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Binary-Tree-Traversal"   >          <a href="#Binary-Tree-Traversal" class="heading-link"><i class="fas fa-link"></i></a><a href="#Binary-Tree-Traversal" class="headerlink" title="Binary Tree Traversal"></a>Binary Tree Traversal</h1>      <p>眾所周知，Binary Tree Traversal 有三種方式，In-Order（中序法）、Pre-Order（前序法）與 Post-Order（後序法）。他們的差異主要是尋訪時，父節點相對於子節點的順序。</p><a id="more"></a><p>In-Order:   左中右<br>Pre-Order:  中左右<br>Post-Order: 左右中</p><p>例如，我們有一顆這樣的樹。</p><p><img src="https://i.imgur.com/uiR7hHz.png" alt=""></p><p>順序分別是：<br>In-Order:   [9,3,2,4,5,7,1,11,7]<br>Pre-Order:  [4,2,3,9,1,5,7,7,11]<br>Post-Order: [9,3,2,7,5,11,7,1,4]</p><p>會寫程式的人，大部分都知道如何以遞迴來解，但用迴圈來解，第一時間大家可能都會卡住。<br>其實利用遞迴，也是使用作業系統的 Stack Segment（堆疊段）來儲存資訊。要改成用迴圈尋訪二元樹，就得用 Stack 把節點資訊儲存起來。</p>        <h1 id="In-Order（中序法）"   >          <a href="#In-Order（中序法）" class="heading-link"><i class="fas fa-link"></i></a><a href="#In-Order（中序法）" class="headerlink" title="In-Order（中序法）"></a>In-Order（中序法）</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.com/problems/binary-tree-inorder-traversal/"  target="_blank" rel="noopener">94. Binary Tree Inorder Traversal</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>先往左走到底，邊走邊紀錄節點資訊到 Stack 中，到底之後，我們拿出堆疊最上面的節點，拿出值，並往右節點前進一步，繼續向左。</p>        <h2 id="Recursive"   >          <a href="#Recursive" class="heading-link"><i class="fas fa-link"></i></a><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        traversal(root);</span><br><span class="line">        <span class="keyword">return</span> sol;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        traversal(root-&gt;left);</span><br><span class="line">        sol.emplace_back(root-&gt;val);</span><br><span class="line">        traversal(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sol;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h2 id="Iterative"   >          <a href="#Iterative" class="heading-link"><i class="fas fa-link"></i></a><a href="#Iterative" class="headerlink" title="Iterative"></a>Iterative</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sol;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> sol;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur || !s.empty()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">                s.push(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = s.top(); s.pop();</span><br><span class="line">                sol.emplace_back(cur-&gt;val);</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sol;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h1 id="Pre-Order（前序法）"   >          <a href="#Pre-Order（前序法）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Pre-Order（前序法）" class="headerlink" title="Pre-Order（前序法）"></a>Pre-Order（前序法）</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.com/problems/binary-tree-preorder-traversal/"  target="_blank" rel="noopener">144. Binary Tree Preorder Traversal</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>從 Stack 頂部先把父節點拿出來，儲存值。接著把右節點放入 Stack，再把左節點放入 Stack。<br>下一次就會從左節點先拿出來當作子樹的父節點了。</p>        <h2 id="Recursive-1"   >          <a href="#Recursive-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Recursive-1" class="headerlink" title="Recursive"></a>Recursive</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        traversal(root);</span><br><span class="line">        <span class="keyword">return</span> sol;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        sol.emplace_back(root-&gt;val);</span><br><span class="line">        traversal(root-&gt;left);</span><br><span class="line">        traversal(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sol;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h2 id="Iterative-1"   >          <a href="#Iterative-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Iterative-1" class="headerlink" title="Iterative"></a>Iterative</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sol;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> sol;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</span><br><span class="line">        s.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!s.empty()) &#123;</span><br><span class="line">            TreeNode* cur = s.top(); s.pop();</span><br><span class="line">            sol.emplace_back(cur-&gt;val);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;right) s.push(cur-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;left) s.push(cur-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sol;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h1 id="Post-Order（後序法）"   >          <a href="#Post-Order（後序法）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Post-Order（後序法）" class="headerlink" title="Post-Order（後序法）"></a>Post-Order（後序法）</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.com/problems/binary-tree-postorder-traversal/"  target="_blank" rel="noopener">145. Binary Tree Postorder Traversal</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>先把父節點從堆疊頂拿出來（看就好，不要 pop），將其右左子節點分別放入 Stack，並且將指標設成 nullptr。下一次迴圈，拿出來的就會是左節點。</p><p>最後，如果拿出來的節點左右都已經是空的，代表左右節點都已經讀取完畢，我們可以放心的把父節點 pop 出 Stack，將值存起來。</p>        <h2 id="Recursive-2"   >          <a href="#Recursive-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Recursive-2" class="headerlink" title="Recursive"></a>Recursive</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        traversal(root);</span><br><span class="line">        <span class="keyword">return</span> sol;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        traversal(root-&gt;left);</span><br><span class="line">        traversal(root-&gt;right);</span><br><span class="line">        sol.emplace_back(root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sol;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h2 id="Iterative-2"   >          <a href="#Iterative-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Iterative-2" class="headerlink" title="Iterative"></a>Iterative</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sol;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> sol;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</span><br><span class="line">        s.push(root);</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!s.empty()) &#123;</span><br><span class="line">            cur = s.top(); </span><br><span class="line">            <span class="keyword">if</span>(!cur-&gt;left &amp;&amp;&amp; !cur-&gt;right) &#123;</span><br><span class="line">                s.pop();</span><br><span class="line">                sol.emplace_back(cur-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;right) &#123;</span><br><span class="line">                s.push(cur-&gt;right);</span><br><span class="line">                cur-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;left) &#123;</span><br><span class="line">                s.push(cur-&gt;left);</span><br><span class="line">                cur-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sol;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Binary-Tree-Traversal&quot;   &gt;
          &lt;a href=&quot;#Binary-Tree-Traversal&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Binary-Tree-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree Traversal&quot;&gt;&lt;/a&gt;Binary Tree Traversal&lt;/h1&gt;
      &lt;p&gt;眾所周知，Binary Tree Traversal 有三種方式，In-Order（中序法）、Pre-Order（前序法）與 Post-Order（後序法）。他們的差異主要是尋訪時，父節點相對於子節點的順序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://bclin.tw/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>【LeetCode】解題報告</title>
    <link href="https://bclin.tw/2021/08/17/leetcode-collection/"/>
    <id>https://bclin.tw/2021/08/17/leetcode-collection/</id>
    <published>2021-08-17T22:01:00.000Z</published>
    <updated>2022-10-04T15:54:05.129Z</updated>
    
    <content type="html"><![CDATA[<p>這篇文章會記錄所有 LeetCode 刷題系列文章。</p>        <h1 id="Top-Interview-Questions"   >          <a href="#Top-Interview-Questions" class="heading-link"><i class="fas fa-link"></i></a><a href="#Top-Interview-Questions" class="headerlink" title="Top Interview Questions"></a>Top Interview Questions</h1>              <h2 id="Array-amp-Strings"   >          <a href="#Array-amp-Strings" class="heading-link"><i class="fas fa-link"></i></a><a href="#Array-amp-Strings" class="headerlink" title="Array &amp; Strings"></a>Array &amp; Strings</h2>              <h3 id="Easy"   >          <a href="#Easy" class="heading-link"><i class="fas fa-link"></i></a><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h3>      <p><a href="https://bclin.tw/2021/07/12/leetcode-1/">1. Two Sum</a></p><p><a href="https://bclin.tw/2021/09/06/leetcode-7/">7. Reverse Integer</a></p><p><a href="https://bclin.tw/2021/09/07/leetcode-14/">14. Longest Common Prefix</a></p><p><a href="https://bclin.tw/2021/08/20/leetcode-26/">26. Remove Duplicates from Sorted Array</a></p><p><a href="">28. Implement strStr()</a></p><p><a href="https://bclin.tw/2021/08/23/leetcode-36">36. Valid Sudoku</a></p><p><a href="https://bclin.tw/2021/08/22/leetcode-66">66. Plus One</a></p><p><a href="https://bclin.tw/2021/08/20/leetcode-122/">122. Best Time to Buy and Sell Stock II</a></p><p><a href="">125. Valid Palindrome</a></p><p><a href="https://bclin.tw/2021/08/22/leetcode-136/">136. Single Number</a></p><p><a href="https://bclin.tw/2021/08/21/leetcode-217">217. Contains Duplicate</a></p><p><a href="https://bclin.tw/2022/01/10/leetcode-242/">242. Valid Anagram</a></p><p><a href="https://bclin.tw/2021/08/22/leetcode-283">283. Move Zeroes</a></p><p><a href="https://bclin.tw/2021/08/22/leetcode-350">350. Intersection of Two Arrays II</a></p><p><a href="https://bclin.tw/2022/01/10/leetcode-387/">387. First Unique Character in a String</a></p>        <h3 id="Medium"   >          <a href="#Medium" class="heading-link"><i class="fas fa-link"></i></a><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3>      <p><a href="https://bclin.tw/2021/07/07/leetcode-3/">3. Longest Substring Without Repeating Characters</a></p><p><a href="https://bclin.tw/2021/07/22/leetcode-5/">5. Longest Palindromic Substring</a></p><p><a href="https://bclin.tw/2021/07/27/leetcode-11/">11. Container With Most Water</a></p><p><a href="https://bclin.tw/2021/07/29/leetcode-15/">15. 3Sum</a></p><p><a href="">38. Count and Say</a></p><p><a href="https://bclin.tw/2021/08/24/leetcode-48/">48. Rotate Image</a></p><p><a href="https://bclin.tw/2021/08/06/leetcode-49/">49. Group Anagrams</a></p><p><a href="https://bclin.tw/2021/09/05/leetcode-54/">54. Spiral Matrix</a></p><p><a href="https://bclin.tw/2021/08/23/leetcode-73/">73. Set Matrix Zeroes</a></p><p><a href="https://bclin.tw/2021/09/05/leetcode-128/">128. Longest Consecutive Sequence</a></p><p><a href="https://bclin.tw/2021/08/21/leetcode-189">189. Rotate Array</a></p><p><a href="https://bclin.tw/2022/05/30/leetcode-227">227. Basic Calculator II</a></p><p><a href="https://bclin.tw/2022/05/26/leetcode-238">238. Product of Array Except Self</a></p><p><a href="https://bclin.tw/2022/05/31/leetcode-287">287. Find the Duplicate Number</a></p><p><a href="">289. Game of Life</a></p><p><a href="https://bclin.tw/2022/06/19/leetcode-334">334. Increasing Triplet Subsequence</a></p><p><a href="https://bclin.tw/2022/05/31/leetcode-340/">340. Longest Substring with At Most K Distinct Characters</a></p><p><a href="https://bclin.tw/2022/01/10/leetcode-344/">344. Reverse String</a></p><p><a href="https://bclin.tw/2022/05/29/leetcode-454/">454. 4Sum II</a></p>        <h3 id="Hard"   >          <a href="#Hard" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hard" class="headerlink" title="Hard"></a>Hard</h3>      <p><a href="https://bclin.tw/2022/05/30/leetcode-41/">41. First Missing Positive</a></p><p><a href="https://bclin.tw/2022/06/07/leetcode-76/">76. Minimum Window Substring</a></p><p><a href="https://bclin.tw/2022/01/09/leetcode-239/">239. Sliding Window Maximum</a></p>        <h2 id="Linked-List"   >          <a href="#Linked-List" class="heading-link"><i class="fas fa-link"></i></a><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h2>              <h3 id="Easy-1"   >          <a href="#Easy-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Easy-1" class="headerlink" title="Easy"></a>Easy</h3>      <p><a href="https://bclin.tw/2021/08/02/leetcode-21/">21. Merge Two Sorted Lists</a></p><p><a href="https://bclin.tw/2022/06/19/leetcode-141/">141. Linked List Cycle</a></p><p><a href="https://bclin.tw/2022/06/19/leetcode-160/">160. Intersection of Two Linked Lists</a></p><p><a href="https://bclin.tw/2022/06/19/leetcode-206">206. Reverse Linked List</a></p><p><a href="https://bclin.tw/2022/06/20/leetcode-234">234. Palindrome Linked List</a></p><p><a href="">237. Delete Node in a Linked List</a></p>        <h3 id="Medium-1"   >          <a href="#Medium-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h3>      <p><a href="https://bclin.tw/2022/06/20/leetcode-2/">2. Add Two Numbers</a></p><p><a href="https://bclin.tw/2021/07/30/leetcode-19/">19. Remove Nth Node From End of List</a></p><p><a href="https://bclin.tw/2021/08/02/leetcode-21/">21. Merge Two Sorted List</a></p><p><a href="https://bclin.tw/2022/06/06/leetcode-138/">138. Copy List with Random Pointer</a></p><p><a href="https://bclin.tw/2022/06/20/leetcode-328/">328. Odd Even Linked List</a></p>        <h3 id="Hard-1"   >          <a href="#Hard-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hard-1" class="headerlink" title="Hard"></a>Hard</h3>      <p><a href="https://bclin.tw/2021/08/03/leetcode-23/">23. Merge k Sorted Lists</a></p>        <h2 id="Trees-amp-Graphs"   >          <a href="#Trees-amp-Graphs" class="heading-link"><i class="fas fa-link"></i></a><a href="#Trees-amp-Graphs" class="headerlink" title="Trees &amp; Graphs"></a>Trees &amp; Graphs</h2>              <h3 id="Easy-2"   >          <a href="#Easy-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Easy-2" class="headerlink" title="Easy"></a>Easy</h3>      <p><a href="https://bclin.tw/2022/01/11/tree-traversal/">94. Binary Tree Inorder Traversal</a></p><p><a href="https://bclin.tw/2022/07/03/leetcode-101/">101. Symmetric Tree</a></p><p><a href="https://bclin.tw/2022/07/03/leetcode-104/">104. Maximum Depth of Binary Tree</a></p><p><a href="https://bclin.tw/2022/07/03/leetcode-108/">108. Convert Sorted Array to Binary Search Tree</a></p>        <h3 id="Medium-2"   >          <a href="#Medium-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h3>      <p><a href="https://bclin.tw/2022/07/03/leetcode-98/">98. Validate Binary Search Tree</a></p><p><a href="https://bclin.tw/2022/07/04/leetcode-102/">102. Binary Tree Level Order Traversal</a></p><p><a href="https://bclin.tw/2022/07/04/leetcode-103/">103. Binary Tree Zigzag Level Order Traversal</a></p><p><a href="https://bclin.tw/2022/01/11/leetcode-116/">116. Populating Next Right Pointers in Each Node</a></p><p><a href="https://bclin.tw/2022/06/14/leetcode-130/">130. Surrounded Regions</a></p><p><a href="https://bclin.tw/2022/07/05/leetcode-200/">200. Number of Islands</a></p><p><a href="https://bclin.tw/2022/01/18/leetcode-207/">207. Course Schedule</a></p><p><a href="https://bclin.tw/2022/01/18/leetcode-207/">210. Course Schedule II</a></p><p><a href="https://bclin.tw/2022/07/06/leetcode-230/">230. Kth Smallest Element in a BST</a></p><p><a href="https://bclin.tw/2022/07/06/leetcode-236/">236. Lowest Common Ancestor of a Binary Tree</a></p><p><a href="https://bclin.tw/2022/07/06/leetcode-547/">547. Number of Provinces</a></p>        <h3 id="Hard-2"   >          <a href="#Hard-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hard-2" class="headerlink" title="Hard"></a>Hard</h3>      <p><a href="">124. Binary Tree Maximum Path Sum</a></p><p><a href="https://bclin.tw/2022/06/14/leetcode-127/">127. Word Ladder</a></p><p><a href="">269. Alien Dictionary</a></p><p><a href="">329. Longest Increasing Path in a Matrix</a></p>        <h2 id="Backtracking"   >          <a href="#Backtracking" class="heading-link"><i class="fas fa-link"></i></a><a href="#Backtracking" class="headerlink" title="Backtracking"></a>Backtracking</h2>              <h3 id="Medium-3"   >          <a href="#Medium-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h3>      <p><a href="https://bclin.tw/2022/07/06/leetcode-17/">17. Letter Combinations of a Phone Number</a></p><p><a href="https://bclin.tw/2022/07/06/leetcode-22/">22. Generate Parentheses</a></p><p><a href="https://bclin.tw/2022/06/25/leetcode-46/">46. Permutations</a></p><p><a href="https://bclin.tw/2022/07/07/leetcode-78/">78. Subsets</a></p><p><a href="https://bclin.tw/2022/07/07/leetcode-79/">79. Word Search</a></p><p><a href="https://bclin.tw/2022/07/07/leetcode-131/">131. Palindrome Partitioning</a></p>        <h3 id="Hard-3"   >          <a href="#Hard-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hard-3" class="headerlink" title="Hard"></a>Hard</h3>      <p><a href="">10. Regular Expression Matching</a></p><p><a href="">44. Wildcard Matching</a></p><p><a href="">212. Word Search II</a></p><p><a href="">301. Remove Invalid Parentheses</a></p>        <h2 id="Sorting-and-Searching"   >          <a href="#Sorting-and-Searching" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sorting-and-Searching" class="headerlink" title="Sorting and Searching"></a>Sorting and Searching</h2>              <h3 id="Easy-3"   >          <a href="#Easy-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Easy-3" class="headerlink" title="Easy"></a>Easy</h3>      <p><a href="">88. Merge Sorted Array</a></p><p><a href="">278. First Bad Version</a></p>        <h3 id="Medium-4"   >          <a href="#Medium-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h3>      <p><a href="">33. Search in Rotated Sorted Array</a></p><p><a href="">34. Find First and Last Position of Element in Sorted Array</a></p><p><a href="https://bclin.tw/2021/08/09/leetcode-56/">56. Merge Intervals</a></p><p><a href="https://bclin.tw/2022/02/02/leetcode-75/">75. Sort Colors</a></p><p><a href="">162. Find Peak Element</a></p><p><a href="https://bclin.tw/2022/02/12/leetcode-215/">215. Kth Largest Element in an Array</a></p><p><a href="">240. Search a 2D Matrix II</a></p><p><a href="https://bclin.tw/2022/06/23/leetcode-253">253. Meeting Rooms II</a></p><p><a href="">347. Top K Frequent Elements</a></p><p><a href="">378. Kth Smallest Element in a Sorted Matrix</a></p>        <h3 id="Hard-4"   >          <a href="#Hard-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hard-4" class="headerlink" title="Hard"></a>Hard</h3>      <p><a href="">Median of Two Sorted Arrays</a></p>        <h2 id="Dynamic-Programming"   >          <a href="#Dynamic-Programming" class="heading-link"><i class="fas fa-link"></i></a><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2>              <h3 id="Easy-4"   >          <a href="#Easy-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#Easy-4" class="headerlink" title="Easy"></a>Easy</h3>      <p><a href="https://bclin.tw/2021/08/07/leetcode-53/">53. Maximum Subarray</a></p><p><a href="https://bclin.tw/2022/06/28/leetcode-70/">70. Climbing Stairs</a></p><p><a href="">121. Best Time to Buy and Sell Stock</a></p><p><a href="https://bclin.tw/2022/06/28/leetcode-198/">198. House Robber</a></p>        <h3 id="Medium-5"   >          <a href="#Medium-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#Medium-5" class="headerlink" title="Medium"></a>Medium</h3>      <p><a href="https://bclin.tw/2021/08/07/leetcode-55/">55. Jump Game</a></p><p><a href="https://bclin.tw/2021/08/09/leetcode-62/">62. Unique Paths</a></p><p><a href="https://bclin.tw/2021/06/21/leetcode-139/">139. Word Break</a></p><p><a href="">152. Maximum Product Subarray</a></p><p><a href="">300. Longest Increasing Subsequence</a></p><p><a href="">322. Coin Change</a></p>        <h2 id="Design"   >          <a href="#Design" class="heading-link"><i class="fas fa-link"></i></a><a href="#Design" class="headerlink" title="Design"></a>Design</h2>              <h3 id="Medium-6"   >          <a href="#Medium-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#Medium-6" class="headerlink" title="Medium"></a>Medium</h3>      <p><a href="https://bclin.tw/2021/08/14/leetcode-146/">146. LRU Cache</a></p>        <h2 id="Math"   >          <a href="#Math" class="heading-link"><i class="fas fa-link"></i></a><a href="#Math" class="headerlink" title="Math"></a>Math</h2>              <h3 id="Easy-5"   >          <a href="#Easy-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#Easy-5" class="headerlink" title="Easy"></a>Easy</h3>      <p><a href="">13. Roman to Integer</a></p><p><a href="">50. Pow(x, n)</a></p><p><a href="">69. Sqrt(x)</a></p><p><a href="">171. Excel Sheet Column Number</a></p><p><a href="">172. Factorial Trailing Zeroes</a></p><p><a href="">202. Happy Number</a></p><p><a href="">204. Count Primes</a></p><p><a href="">326. Power of Three</a></p><p><a href="">412. Fizz Buzz</a></p>        <h3 id="Medium-7"   >          <a href="#Medium-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#Medium-7" class="headerlink" title="Medium"></a>Medium</h3>      <p><a href="">29. Divide Two Integers</a></p>        <h2 id="Others"   >          <a href="#Others" class="heading-link"><i class="fas fa-link"></i></a><a href="#Others" class="headerlink" title="Others"></a>Others</h2>              <h3 id="Easy-6"   >          <a href="#Easy-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#Easy-6" class="headerlink" title="Easy"></a>Easy</h3>      <p><a href="https://bclin.tw/2021/07/31/leetcode-20/">20. Valid Parentheses</a></p><p><a href="">118. Pascal’s Triangle</a></p><p><a href="">169. Majority Element</a></p><p><a href="">202. Happy Number</a></p><p><a href="">268. Missing Number</a></p><p><a href="">371. Sum of Two Integers</a></p><p><a href="">461. Hamming Distance</a></p>        <h3 id="Medium-8"   >          <a href="#Medium-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#Medium-8" class="headerlink" title="Medium"></a>Medium</h3>      <p><a href="">150. Evaluate Reverse Polish Notation</a></p>        <h1 id="Problem-Lists"   >          <a href="#Problem-Lists" class="heading-link"><i class="fas fa-link"></i></a><a href="#Problem-Lists" class="headerlink" title="Problem Lists"></a>Problem Lists</h1>      <p><a href="https://bclin.tw/2021/08/06/leetcode-39/">39. Combination Sum</a></p><p><a href="https://bclin.tw/2022/08/01/leetcode-74/">74. Search a 2D Matrix</a></p><p><a href="https://bclin.tw/2021/06/11/leetcode-143/">143. Reorder List</a></p><p><a href="https://bclin.tw/2022/08/01/leetcode-221/">221. Maximal Square</a></p><p><a href="https://bclin.tw/2022/03/02/leetcode-324/">324. Wiggle Sort</a></p><p><a href="https://bclin.tw/2022/08/01/leetcode-362/">362. Design Hit Counter</a></p><p><a href="https://bclin.tw/2022/08/30/leetcode-363/">363. Max Sum of Rectangle No Larger Than K</a></p><p><a href="https://bclin.tw/2022/07/04/leetcode-376/">376. Wiggle Subsequence</a></p><p><a href="https://bclin.tw/2022/08/01/leetcode-416/">416. Partition Equal Subset Sum</a></p><p><a href="https://bclin.tw/2022/08/01/leetcode-437/">437. Path Sum III</a></p><p><a href="https://bclin.tw/2022/08/01/leetcode-525/">525. Contiguous Array</a></p><p><a href="https://bclin.tw/2021/06/17/leetcode-647/">647. Palindromic Substrings</a></p><p><a href="https://bclin.tw/2022/07/04/leetcode-658">658. Find K Closest Elements</a></p><p><a href="https://bclin.tw/2022/08/01/leetcode-735/">735. Asteroid Collision</a></p><p><a href="https://bclin.tw/2022/08/24/leetcode-815/">815. Bus Routes</a></p><p><a href="https://bclin.tw/2022/08/01/leetcode-916/">916. Word Subsets</a></p><p><a href="https://bclin.tw/2022/09/07/leetcode-973/">973. K Closest Points to Origin</a></p><p><a href="https://bclin.tw/2022/09/28/leetcode-990/">990. Satisfiability of Equality Equations</a></p><p><a href="https://bclin.tw/2022/07/20/leetcode-1074">1074. Number of Submatrices That Sum to Target</a></p><p><a href="https://bclin.tw/2022/02/01/leetcode-1942">1942. The Number of the Smallest Unoccupied Chair</a></p><p><a href="https://bclin.tw/2022/08/17/leetcode-2131">2131. Longest Palindrome by Concatenating Two Letter Words</a></p><p><a href="https://bclin.tw/2022/09/21/leetcode-2415">2415. Reverse Odd Levels of Binary Tree</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這篇文章會記錄所有 LeetCode 刷題系列文章。&lt;/p&gt;

        &lt;h1 id=&quot;Top-Interview-Questions&quot;&gt;
          &lt;a href=&quot;#Top-Interview-Questions&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Top-Interview-Questions&quot; class=&quot;headerlink&quot; title=&quot;Top Interview Questions&quot;&gt;&lt;/a&gt;Top Interview Questions&lt;/h1&gt;
      
        &lt;h2 id=&quot;Array-amp-Strings&quot;&gt;
          &lt;a href=&quot;#Array-amp-Strings&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Array-amp-Strings&quot; class=&quot;headerlink&quot; title=&quot;Array &amp;amp; Strings&quot;&gt;&lt;/a&gt;Array &amp;amp; Strings&lt;/h2&gt;
      
        &lt;h3 id=&quot;Easy&quot;&gt;
          &lt;a href=&quot;#Easy&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Easy&quot; class=&quot;headerlink&quot; title=&quot;Easy&quot;&gt;&lt;/a&gt;Easy&lt;/h3&gt;
      &lt;p&gt;&lt;a href=&quot;https://bclin.tw/2021/07/12/leetcode-1/&quot;&gt;1. Two Sum&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>終結永恆，從此無限《永恆的終結》</title>
    <link href="https://bclin.tw/2021/08/01/the-end-of-eternity/"/>
    <id>https://bclin.tw/2021/08/01/the-end-of-eternity/</id>
    <published>2021-08-01T18:10:40.000Z</published>
    <updated>2022-10-04T15:54:05.129Z</updated>
    
    <content type="html"><![CDATA[<p>今年四月，鸚鵡螺出版了艾西莫夫的經典中篇小說《永恆的終結》（The End of Eternity），我很是興奮。長久以來，出版社都只顧著出版名氣最大的《機器人系列》（Robot Series）、《銀河帝國三部曲》（The Galactic Empire Trilogy）與《基地系列》（The Foundation Series），艾西莫夫的作品中也屬這大基地系列最出名。然而，大師之所以為大師，便在於出色的不僅僅是長篇，中短篇也是極為優秀，讀來韻味無窮。例如《神們自己》（The Gods Themselves）、最後的問題（The Last Question）以及這次介紹的《永恆的終結》</p><a id="more"></a><p>《永恆的終結》描繪了一個人類能進行時間旅行的未來世界，人類建造了一個獨立於時空之外的場域 - 永恆域，從各個世紀選出有潛力的人類加入永恆域，他們被稱作永恆人，負責監控各世紀的人類發展，在關鍵時刻給予最低限度的影響，以此修正人類社會的錯誤，從而維持社會秩序，增進人類的最大福祉，避免人類滅絕。不斷修正歷史，某些人類將不復存在，某些先進科技也將消失，都是為了讓人類避免重大災難的發生所必要的犧牲。</p><p>從我的觀點來看，這就像是過度保護小孩的父母，或是在盛世中忘卻憂患的民族，永恆域將人類的過去與未來打理的妥妥貼貼，沒有核子武器與太空旅行，人類便不會接觸到毀滅性的戰爭與宇宙中的危險，對於自身以及外在世界的探索停滯了，再也不會進步。沒有了典範轉移，僅只是文化上的形式轉變，這本身便是一件相當可怕的災害，然而對於永恆域來說，這才是人類的最大福祉。人類並未在三萬個世紀間有顯著的改變，同質性依然相當高，這令我想到，《三體2》中，丁儀在接觸水滴之前，說了這段話</p><blockquote><p>「孩子們，你們知道我這些年都在於什麼嗎？在大學裡教物理，還帶博士生。他遙望著外面的星河，臉上露出莫測的笑容，軍官們發現，那笑容竟有些凄慘，孩子們啊，我這兩個世紀前的人了，現在居然還能在大學裡教物理。他說完，轉身離去。」</p></blockquote><p>艾西莫夫也寫下了自身對於人類未來的看法，在溫室中成長的花朵終將死於安樂。<br>最後的結尾也隱隱約約接上了銀河帝國，暗示永恆域毀滅後，人類的未來從永恆走向了無限。</p><blockquote><p>The final end of Eternity, and the beginning of Infinity</p></blockquote>        <h2 id="Bootstrap-Paradox-Ontological-Paradox"   >          <a href="#Bootstrap-Paradox-Ontological-Paradox" class="heading-link"><i class="fas fa-link"></i></a><a href="#Bootstrap-Paradox-Ontological-Paradox" class="headerlink" title="Bootstrap Paradox / Ontological Paradox"></a>Bootstrap Paradox / Ontological Paradox</h2>      <p>作為一本時間旅行相關的科幻小說，自然應用了時間悖論，艾西莫夫使用了 Bootstrap Paradox，或者也稱 Ontological Paradox 來鋪陳整個故事。所謂 Bootstrap Paradox 指的是資訊 — 例如一本書、一個樂譜、一個人 — 被傳送到過去，造成無法溯及其起源的狀態。例如《Rick and Morty》第四季第五集中，他們不斷地從未來收到聖誕帽，再把聖誕帽往過去丟，為了因果的完整性，他們總是會做相同的事情，造成一個無限循環。其他還有很多，《涼宮春日的消失》最後的結尾，阿虛前往解救自己也算是 Bootstrap 的典型。</p>        <h1 id="總結"   >          <a href="#總結" class="heading-link"><i class="fas fa-link"></i></a><a href="#總結" class="headerlink" title="總結"></a>總結</h1>      <p>科幻作品的迷人之處，其一，在於作品本身能探討超越目前人類所能遭遇的假想狀況，例如時空悖論、存在的終極意義、宇宙的命運，這些哲學思想將有助於人類在未來的發展；其二，在於科幻的想像能啟發讀者們對於未來以及科學的興趣，這些讀者將在人類成長的過程中推波助瀾，成為不可或缺的一部分。</p><p>而艾西莫夫的作品在這兩點做到完美，哲學性的思辨兼具啟發未來科學的想像。有興趣的讀者不妨一讀，必定收穫良多。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年四月，鸚鵡螺出版了艾西莫夫的經典中篇小說《永恆的終結》（The End of Eternity），我很是興奮。長久以來，出版社都只顧著出版名氣最大的《機器人系列》（Robot Series）、《銀河帝國三部曲》（The Galactic Empire Trilogy）與《基地系列》（The Foundation Series），艾西莫夫的作品中也屬這大基地系列最出名。然而，大師之所以為大師，便在於出色的不僅僅是長篇，中短篇也是極為優秀，讀來韻味無窮。例如《神們自己》（The Gods Themselves）、最後的問題（The Last Question）以及這次介紹的《永恆的終結》&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>過度思考表象的現代社會《守門員的焦慮》</title>
    <link href="https://bclin.tw/2020/11/09/Die-Angst-des-Tormanns-beim-Elfmeter/"/>
    <id>https://bclin.tw/2020/11/09/Die-Angst-des-Tormanns-beim-Elfmeter/</id>
    <published>2020-11-09T15:58:27.000Z</published>
    <updated>2022-10-04T15:54:05.125Z</updated>
    
    <content type="html"><![CDATA[<p>前一陣子在逛誠品時，偶然看到木馬文化新譯了兩本 2019 年諾貝爾文學獎得主 Peter Handke 的作品《守門員的焦慮》以及《夢外之悲》。藉著這個機會，原本要買赫拉巴爾作品的我，改買了《守門員的焦慮》。</p><a id="more"></a><p>這是一本中短篇小說，約一百八十頁的篇幅，展現了存在主義式的社會斷裂感與無名的距離感，使我聯想到卡謬的《異鄉人》以及安部公房的《燃盡的地圖》，它們都帶有一種無法觸及、隔著薄膜的疏離感。</p>        <h2 id="迷失的細節"   >          <a href="#迷失的細節" class="heading-link"><i class="fas fa-link"></i></a><a href="#迷失的細節" class="headerlink" title="迷失的細節"></a>迷失的細節</h2>      <p>閱讀《守門員的焦慮》時，我第一個感受到的是文字的節奏不同其他小說。Handke 大量使用了簡單的描述句，而不是華麗且細節豐富的詞句。並排這些簡單的描述句除了引發一種近似音樂感的節奏，還增加了細節的重量。讀者從一個細節的簡易描述輕易且快速地被帶往下一個細節，從而引發一種快速地迭代感，由於句子簡單，還來不及細想便已讀到下一句，但句子的細節卻超重了，於是讀者被置於一種細節喪失的無力感中。</p><p>而這也是主角布洛赫所感受到的焦慮。</p><p><br><em>電影《守門員的焦慮》（1972）</em><br><img src="https://i.imgur.com/91NRlFo.jpg" alt=""></p>        <h2 id="象徵的解讀"   >          <a href="#象徵的解讀" class="heading-link"><i class="fas fa-link"></i></a><a href="#象徵的解讀" class="headerlink" title="象徵的解讀"></a>象徵的解讀</h2>      <blockquote><p>「守門員眼看著球滾過了球門線……」<br>曾是知名足球守門員的裝配工人約瑟夫．布洛赫在上午上工報到時被通知遭到解雇。<br>至少這是布洛赫對下述事實的解讀：<br>當她出現在工人聚集的工寮門口，就只有工頭一邊吃著點心還抬眼看他。</p></blockquote><p>小說的開頭描述了曾是守門員的主角布洛赫，被解雇了。而出乎讀者意料的，是主角判斷自己被解雇的依據，竟然是因為只有工頭邊吃點心還看著他。<br>正如同楊照在說書中所提及：「表面的訊息跟內在的意義在這個小說中都斷裂開了。」<br>這種將象徵與意義拆解開的筆法尤其令讀者不解，甚至不安。搭配極多的細節與快節奏，營造出的效果，就像電影中快速剪輯的鏡頭一樣。</p><p>一如開頭的例子，我們幾乎總是能在小說中看到類似的描述：</p><blockquote><p>先前當他一言未發地把錢歌在轉盤上，售票小姐就彷彿理所當然地用另一個動作來回應。事後這令他感到納悶。</p></blockquote><blockquote><p>他向一個警察打招呼，以為這能讓對方停下腳步，但警察沒有回禮。布洛赫納悶警察是否沒有正確解讀他隔著馬路呼喊的話語，又想起戲院那個售票小姐把電影票用轉盤轉到他面前地那份理所當然。她迅速地動作令他大為吃驚，使他差點忘了把電影票從轉盤上拿走。他決定去找那名售票小姐。</p></blockquote><p>又或者是下列這段，充分展現出主角因擔憂而幾近崩潰的過度思考。</p><blockquote><p>外面有一件金屬敲在窗玻璃上。當他問起，老闆娘答道是避雷針的導線鬆脫了。先前在學校裡布洛赫就曾注意到一個避雷針，立刻把這個重複出現理解為蓄意；他接連兩次遇到避雷針，這不可能是巧合。他根本就覺得所有的東西都很相似，所有的事物都使他互相聯想。避雷針重複出現意味著什麼呢？他該從避雷針身上看出什麼？「避雷針」？這大概又是個文字遊戲？意思是他不會出事？還是說這暗示著他該向老闆娘全盤托出？而那邊木盤上的餅乾為什麼是魚的形狀？它們在影射什麼？是說他應該「像魚一樣沉默」嗎？他不該再往下說？木盤上的餅乾是在向她暗示這個嗎？彷彿他並非看見了這一切，而是某處從一張行為準則布告上讀到的。</p></blockquote>        <h3 id="反小說"   >          <a href="#反小說" class="heading-link"><i class="fas fa-link"></i></a><a href="#反小說" class="headerlink" title="反小說"></a>反小說</h3>      <p>作者在書中並未採用全知角度敘事，意味著讀者必須與布洛赫共同分擔狀況未明的擔憂或焦慮。我們不知道鐘聲是納許市場傳出來的，亦或是電影中的音效。讀者跟著布洛赫一起觀察、推測、忐忑，卻直到最後也沒有答案，甚至無從確認是否真的有人知道是布洛赫犯下犯行。</p>        <h2 id="在社會中存找意義"   >          <a href="#在社會中存找意義" class="heading-link"><i class="fas fa-link"></i></a><a href="#在社會中存找意義" class="headerlink" title="在社會中存找意義"></a>在社會中存找意義</h2>      <p>人類社會自古至今演化出了許多種集體的潛規則與共識，無論是物品、手勢、動作甚至符號的意義，都是人類社會中重要的一環。<br>我們依靠這種不言自明的共識組建起結構複雜的社會，而不必花時間去釐清背後的涵義。</p><p>即便我們訂下了許多意義，社會中總有一群人無法正確地解讀它們，由於社會化的程度不高導致缺乏關注，他們很容易變成治安的隱患。</p><p>布洛赫正是這一種人，在事件發生前，他便已無法正確將「表面的訊息」跟「內在的意義」連結在一起，在事件後由於焦慮，這樣的狀況更加嚴重。<br>如果一個在社會中的人不被社會認可，或是無法解讀自身的存在，強烈的疏離感很容易使人迷失對自身的價值評估。</p>        <h2 id="守門員的焦慮"   >          <a href="#守門員的焦慮" class="heading-link"><i class="fas fa-link"></i></a><a href="#守門員的焦慮" class="headerlink" title="守門員的焦慮"></a>守門員的焦慮</h2>      <p>其實本書原文的標題應為「守門員對罰球的焦慮」</p><blockquote><p>「射門球員一旦起跑，在球即將被射出之前，守門員就會不自覺地用身體暗示出他會朝哪個方向撲出去，而射門球員就能好整以暇地往另一個方向踢。」布洛赫說<br>「守門員的無奈就好比試圖用一根麥桿來撬開一扇門」</p></blockquote><p>由此我們可以得知，所謂守門員 — 或說是布洛赫的焦慮，其實是不斷要去解讀射門球員的動作。或許射門球員知道守門員知道他會往哪裡射，於是改射另一個角落；或許射門球員想到守門員也猜測到這一步了，於是又改回原來的角落。這樣的思考猜測是無止盡的。</p><p>而我們也從開頭知道，布洛赫後來並不是一個合格的守門員。可以說，在球場上他已無法猜測射門球員的心思，在社會中也依然無法猜測社會符號的涵義。在生活中，他依然是「試圖用一根麥桿來撬開一扇門」這般無力。</p><p>直到最後，布洛赫也無法逃脫這份根深柢固的焦慮。</p>        <h1 id="節錄"   >          <a href="#節錄" class="heading-link"><i class="fas fa-link"></i></a><a href="#節錄" class="headerlink" title="節錄"></a>節錄</h1>      <ul><li>布洛赫喝得相當醉。所有的東西似乎都在他的視野之外。他距離那些正在發生的事如此遙遠，乃至於他本身根本不再出現在他的所見所聞之中。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一陣子在逛誠品時，偶然看到木馬文化新譯了兩本 2019 年諾貝爾文學獎得主 Peter Handke 的作品《守門員的焦慮》以及《夢外之悲》。藉著這個機會，原本要買赫拉巴爾作品的我，改買了《守門員的焦慮》。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>多維空間旅行，談《平面國》</title>
    <link href="https://bclin.tw/2020/11/06/flatland/"/>
    <id>https://bclin.tw/2020/11/06/flatland/</id>
    <published>2020-11-06T17:25:40.000Z</published>
    <updated>2022-10-04T15:54:05.125Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天看了 Edwin A. Abbott 的名作《平面國》，這部薄薄的中篇小說寫成於 1884 年，描寫一個虛構的二維國家：平面國，並藉由正方形的第一人稱敘事，帶領讀者穿梭於不同維度並揭開平面國的真相。</p><!-- more --><p>就我個人來看，我認為《平面國》這本小說有兩個重要的涵義，一是利用簡單的幾何知識來帶領讀者認識不同維度的概念；二是描寫了一個經典的反烏托邦形式國家。</p>        <h1 id="平面國"   >          <a href="#平面國" class="heading-link"><i class="fas fa-link"></i></a><a href="#平面國" class="headerlink" title="平面國"></a>平面國</h1>              <h2 id="維度"   >          <a href="#維度" class="heading-link"><i class="fas fa-link"></i></a><a href="#維度" class="headerlink" title="維度"></a>維度</h2>      <p>直到現在，許多科幻作品都仍有描寫維度的內容，無論是電影、小說、動漫畫都有類似的穿越維度情節。但「維度」（Dimension）一詞對於非數理工科背景的閱聽者來說，是比較陌生且難以想像的概念。</p>        <h3 id="大眾文化"   >          <a href="#大眾文化" class="heading-link"><i class="fas fa-link"></i></a><a href="#大眾文化" class="headerlink" title="大眾文化"></a>大眾文化</h3>      <p>近幾年比較有代表性的或許是 Christopher Nolan 在 2014 年的《星際效應》（Interstellar），主角 Cooper 來到了五維空間。然而，諸如這類電影，或是大眾流行文化中的高維空間，其實是對相對論的中閔可夫斯基時空的誤用，就跟《天能》（Tenet）中把 Inverse Entropy 與時間綁在一起相同。事實上，我更喜歡《平面國》這種歐式空間維度，在劉慈欣《三體》中的高維概念也是應用歐式空間維度，時間則作為獨立維度從空間維度中切割出來。</p><p>這倒也不是 Nolan 的問題，畢竟大眾文化中的高維度與時間脫不了關係，再者，在電影中要表現出四維以上的空間，確實是相當難的一件事情。</p>        <h3 id="平面國-1"   >          <a href="#平面國-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#平面國-1" class="headerlink" title="平面國"></a>平面國</h3>      <p>上世紀的科幻界代表人物，艾西莫夫（Issac Asimov）曾評《平面國》是：「所能找到感受維度方法中最好的」（The best introduction one can find into the manner of perceiving dimensions.）</p><p>這也是為什麼現今這本書依然是數理背景人士的愛好，僅僅是透過簡單的幾何概念與一篇小故事，便能直接地感受維度的概念，是非常厲害的一件事情。</p><p>《平面國》一書從平面為主題下手，我想也是因為，二維與三維空間相對於其他維度，是一般人較為熟悉的。</p>        <h2 id="反烏托邦"   >          <a href="#反烏托邦" class="heading-link"><i class="fas fa-link"></i></a><a href="#反烏托邦" class="headerlink" title="反烏托邦"></a>反烏托邦</h2>      <p>《平面國》事實上就是一個反烏托邦故事。看似一切都完滿而好的世界，其實有很大的陰謀。統治階級為了鞏固利益而設置不平等的政策，同時隱瞞更高維度的存在，恣意逮捕或處死相關的人。</p><p>這種故事與後來 George Orwell 的《動物農莊》極為相似，在短短的篇幅裡描寫了寓意頗深的反烏托邦故事。只是一個是幾何圖形，另一個是以動物為主角。</p><p>平面國是一個二維國家，故事中，本書的作者是身為律師階級的正方形。<br>一開始正方形詳盡描述了平面國是怎麼樣的一個國家，包括空間、社會、自然環境、種族、政策。正方形撰寫關於人文方面的事情時，口氣極為理所當然，讀者可以從中讀出些許不對勁，畢竟 19 世紀的歐美白人奴役黑人也是這般理所當然。</p><p>從正方形所說的色彩革命與階級革命，並且把圓形稱為「主教」、「牧師」，甚至是禁止「有色」，都可以看出作者諷刺的對象與事件。不得不說，19 世紀能有這樣的作品，實屬難得。</p>        <h1 id="總結"   >          <a href="#總結" class="heading-link"><i class="fas fa-link"></i></a><a href="#總結" class="headerlink" title="總結"></a>總結</h1>      <p>無論是喜歡科幻作品或反烏托邦作品的人，都應該好好讀一下兩個世紀前的《平面國》，平易近人，卻深刻又有力。</p><p>雖然科技進步很快速，科幻作品卻始終在更遠方等待我們，探討一些現實卻力所不能及的議題，我想這是我喜歡科幻作品的原因。</p><p>平面國的維度雖然並非我們所能體會，但當中的人性卻是我們可以深思的。在科技進步飛速的今天，人類並不該忘記人類靈魂中最重要且寶貴的東西。</p>]]></content>
    
    <summary type="html">
    
      平面國，一個經典科幻故事。
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>ETW 介紹 2 - Consumer</title>
    <link href="https://bclin.tw/2020/07/30/ETW-2-Consumer/"/>
    <id>https://bclin.tw/2020/07/30/ETW-2-Consumer/</id>
    <published>2020-07-30T11:20:27.000Z</published>
    <updated>2022-10-04T15:54:05.125Z</updated>
    
    <content type="html"><![CDATA[<p>前一篇文章介紹了 ETW 和簡單的使用方式，這次我們要加入 Consumer，使得我們可以即時接收事件。</p><a id="more"></a><p><img src="https://i.imgur.com/aOTJ0dc.png" alt=""></p>        <h1 id="Consumer"   >          <a href="#Consumer" class="heading-link"><i class="fas fa-link"></i></a><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h1>      <p>顧名思義，Consumer 就是事件的消費者，消費的方式主要有兩種，從 Log file，或以 Real-time mode 從 Provider 收事件。在這裡，我們會先用到 <span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace_logfilea"  target="_blank" rel="noopener">EVENT_TRACE_LOGFILE</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 這個結構。</p>        <h2 id="原來的設定"   >          <a href="#原來的設定" class="heading-link"><i class="fas fa-link"></i></a><a href="#原來的設定" class="headerlink" title="原來的設定"></a>原來的設定</h2>      <p>我們需要先更改 pSessionProperties 的 LogFileMode，讓其支援 REAL TIME MODE：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pSessionProperties-&gt;LogFileMode = EVENT_TRACE_REAL_TIME_MODE | EVENT_TRACE_FILE_MODE_SEQUENTIAL;</span><br></pre></td></tr></table></div></figure>        <h2 id="初始化結構"   >          <a href="#初始化結構" class="heading-link"><i class="fas fa-link"></i></a><a href="#初始化結構" class="headerlink" title="初始化結構"></a>初始化結構</h2>      <p>首先我們要宣告一組 EVENT_TRACE_LOGFILE，並先定義收發的模式。<br>再結構中，ProcessTraceMode 其實是 union 的一員，另外還有一個 LogFileMode，但 MSDN 表示這個只是保留，勿使用 LogFileMode。</p><p>我們要使用 Real-time 模式，這個值要設為 PROCESS_TRACE_MODE_REAL_TIME，另外因為我們要用 EventRecordCallback，所以還必須要加上 PROCESS_TRACE_MODE_EVENT_RECORD。</p><p>接下來，我們要設定從哪一個 Session 即時地收事件，把 LoggerName 設成你自己設的 Session 就可以了，這裡要注意的是，如果有設 LoggerName，那LogFileName 就必須設成 NULL (在C++中應該是 nullptr)。</p><p>接著把 EventRecordCallback 設成你要被 Callback 的 function。</p><p>最後用 OpenTrace() 把這個 Consumer 叫起來。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">EVENT_TRACE_LOGFILE TraceLogFile = &#123;&#125;;</span><br><span class="line">ZeroMemory(&amp;TraceLogFile, <span class="keyword">sizeof</span>(EVENT_TRACE_LOGFILE));</span><br><span class="line">TraceLogFile.ProcessTraceMode = PROCESS_TRACE_MODE_REAL_TIME | PROCESS_TRACE_MODE_EVENT_RECORD;</span><br><span class="line">TraceLogFile.LogFileName = <span class="literal">NULL</span>; <span class="comment">// ETWLOGPATH;</span></span><br><span class="line">TraceLogFile.LoggerName = LPWSTR(LOGSESSION_NAME);</span><br><span class="line">TraceLogFile.EventRecordCallback = ETW::EventRecordCallback;</span><br><span class="line"></span><br><span class="line">hTraceHandle = OpenTrace(&amp;TraceLogFile);</span><br><span class="line"><span class="keyword">if</span> (hTraceHandle == INVALID_PROCESSTRACE_HANDLE)</span><br><span class="line">&#123;</span><br><span class="line">    printf_s(<span class="string">"OpenTrace fail: %lu\n"</span>, GetLastError());</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Callback"   >          <a href="#Callback" class="heading-link"><i class="fas fa-link"></i></a><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h2>      <p>Callback function 這邊，我設了一個 function 叫做 EventRecordCallback，一旦我們收到事件，就會呼叫這個 Callback function，建立一個文字檔，寫進 Hello event!</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">VOID WINAPI <span class="title">EventRecordCallback</span><span class="params">(EVENT_RECORD*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ETW::EventRecordCallback(EVENT_RECORD* pEventRecord)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; header = pEventRecord-&gt;EventHeader;</span><br><span class="line"></span><br><span class="line">    DWORD cbWritten;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> HANDLE hFile = CreateFileW(<span class="string">L"C:\\test\\callback_log.txt"</span>, FILE_ALL_ACCESS, <span class="number">0</span>, <span class="number">0</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hFile != INVALID_HANDLE_VALUE)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteFile(hFile, <span class="string">"Hello event!\n"</span>, <span class="keyword">sizeof</span>(<span class="string">"Hello event!\n"</span>), &amp;cbWritten, <span class="literal">nullptr</span>);</span><br><span class="line">        CloseHandle(hFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf_s(<span class="string">"ProcessId: %ul \n"</span>, header.ProcessId);</span><br><span class="line">    printf_s(<span class="string">"ThreadId: %ul \n"</span>, header.ThreadId);</span><br><span class="line">    printf_s(<span class="string">"ProviderId: %ul-%ul-%ul-%s \n"</span>, header.ProviderId.Data1, header.ProviderId.Data2, header.ProviderId.Data3, header.ProviderId.Data4);</span><br><span class="line">    printf_s(<span class="string">"EventDescriptor.Id: %d \n"</span>, header.EventDescriptor.Id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="收-Event"   >          <a href="#收-Event" class="heading-link"><i class="fas fa-link"></i></a><a href="#收-Event" class="headerlink" title="收 Event"></a>收 Event</h2>      <p>要收 Event 的時候，我們要呼叫 ProcessTrace()，呼叫之後就會開始收 Event 叫 Callback 了。直到 BufferCallback （另一種 callback）回傳 FALSE，或是 CloseTrace 被呼叫。所以基本上，這裡我們應該開另一個 Thread 來處理才對。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wprintf_s(<span class="string">L"ProcessTraceThread start.\n"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> status = ProcessTrace(&amp;hTraceHandle, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (status != ERROR_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">    wprintf_s(<span class="string">L"ProcessTrace error: 0x%x\n"</span>, status);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wprintf_s(<span class="string">L"ProcessTraceThread Finish.\n"</span>);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br></pre></td></tr></table></div></figure><p>至於 Close，基本上大同小異，叫 CloseTrace() 來處理。這樣一下 ProcessTrace() 就會關閉了。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (hSession)</span><br><span class="line">&#123;</span><br><span class="line">    wprintf_s(<span class="string">L"Call CloseTrace().\n"</span>);</span><br><span class="line">    CloseTrace(hSession);</span><br><span class="line">    hSession = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一篇文章介紹了 ETW 和簡單的使用方式，這次我們要加入 Consumer，使得我們可以即時接收事件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="軟體研討" scheme="https://bclin.tw/categories/%E8%BB%9F%E9%AB%94%E7%A0%94%E8%A8%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>ETW 介紹 - 以 Event Tracing Session 為範例</title>
    <link href="https://bclin.tw/2020/07/29/ETW/"/>
    <id>https://bclin.tw/2020/07/29/ETW/</id>
    <published>2020-07-29T10:40:27.000Z</published>
    <updated>2022-10-04T15:54:05.125Z</updated>
    
    <content type="html"><![CDATA[<p>因為工作需求，開始接觸 Windows System Programming，每次都覺得 MSDN 寫的很混亂，有時候太注重細節，對於系統沒有全面性的介紹；有時又只有概論，沒有程式碼或實作內容；有些甚至把不同的文件連結在一起就結束了。即使是 Google 找到的資料也比日本製的壓縮機還稀少。最後只能花時間慢慢測試，聽部門的人說，有好幾次都是他們自己試出很 tricky 的用法，跟微軟的技術人員聊一聊，結果居然變成 MSDN 的內容，不知道該哭還是笑。</p><a id="more"></a>        <h1 id="什麼是-ETW-？"   >          <a href="#什麼是-ETW-？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什麼是-ETW-？" class="headerlink" title="什麼是 ETW ？"></a>什麼是 ETW ？</h1>      <p>ETW(Event Tracing for Windows) 是 Windows 提供的一種事件追蹤的方式，利用 ETW 可以實現 real-time 的高速事件追蹤，讓程式設計師可以利用事件做除錯或是效能優化。</p><p><img src="https://i.imgur.com/aOTJ0dc.png" alt=""></p><p>ETW 分為三個部分，Controller、Provider 和 Consumer，Controller 可以開關 Provider，Provider 會提供事件（Event）本身，而 Consumer 則是消費（Consume）事件的人，也就是我們的角色。</p><p>另外，Controller 可以註冊 Session 並設定要負責的 Provrider，Provider 會把本身的事件發給 Session，Session 可以把事件直接發給 Consumer（Real-time mode），或是存到一個 Trace File，Consumer 再去這個檔案拿事件（File Mode）。</p>        <h2 id="Sessions"   >          <a href="#Sessions" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h2>      <p>Session 會從一個或多個 Providers 記錄事件，並且也負責管理和清除 buffer 的資料，而 Session 本身的屬性則是由 Controller 設定的。</p><p>Session 分為很多種：</p><ul><li>Event Tracing Session</li><li>SystemTraceProvider Session<ul><li>NT Kernel Logger Session</li></ul></li><li>AutoLogger Session<ul><li>Global Logger Session</li></ul></li><li>Private Logger Session</li></ul><p>我們在這裡先探討如何簡單地使用 Event tracing sessions 把 Events 存到 Log file。</p>        <h1 id="使用-Event-Tracing-Session"   >          <a href="#使用-Event-Tracing-Session" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用-Event-Tracing-Session" class="headerlink" title="使用 Event Tracing Session"></a>使用 Event Tracing Session</h1>      <p>我們參考 MSDN 上的範例，<span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/etw/example-that-creates-a-session-and-enables-a-manifest-based-provider"  target="_blank" rel="noopener">Example that Creates a Session and Enables a Manifest-based or Classic Provider</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="定義常數"   >          <a href="#定義常數" class="heading-link"><i class="fas fa-link"></i></a><a href="#定義常數" class="headerlink" title="定義常數"></a>定義常數</h2>      <p>首先定義 Log file 的位置，以及 Session 的名稱。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGFILE_PATH <span class="meta-string">L"&lt;FULLPATHTOLOGFILE.etl&gt;"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGSESSION_NAME <span class="meta-string">L"My Event Trace Session"</span></span></span><br></pre></td></tr></table></div></figure><p>接下來是 Session 的 GUID 以及 Provider 的 GUID，其中 Session 的 GUID 是自己設定的唯一值。<br>Provider 的 GUID 則可以透過在 cmd 下 logman query providers 找到。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;AE44CB98-BD11-4069-8093-770EC9258A12&#125;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> GUID SessionGuid = </span><br><span class="line">&#123; <span class="number">0xae44cb98</span>, <span class="number">0xbd11</span>, <span class="number">0x4069</span>, &#123; <span class="number">0x80</span>, <span class="number">0x93</span>, <span class="number">0x77</span>, <span class="number">0xe</span>, <span class="number">0xc9</span>, <span class="number">0x25</span>, <span class="number">0x8a</span>, <span class="number">0x12</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;D8909C24-5BE9-4502-98CA-AB7BDC24899D&#125;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> GUID ProviderGuid = </span><br><span class="line">&#123; <span class="number">0xd8909c24</span>, <span class="number">0x5be9</span>, <span class="number">0x4502</span>, &#123;<span class="number">0x98</span>, <span class="number">0xca</span>, <span class="number">0xab</span>, <span class="number">0x7b</span>, <span class="number">0xdc</span>, <span class="number">0x24</span>, <span class="number">0x89</span>, <span class="number">0x9d</span> &#125; &#125;;</span><br></pre></td></tr></table></div></figure>        <h2 id="初始化空間"   >          <a href="#初始化空間" class="heading-link"><i class="fas fa-link"></i></a><a href="#初始化空間" class="headerlink" title="初始化空間"></a>初始化空間</h2>      <p>首先要為 Session 建立一個空間，儲存 Session 的結構是 EVENT_TRACE_PROPERTIES (Evntrace.h)，但我們還需要儲存上面定義的 Logfile Path 以及 Session name，所以總長會是三者相加。之後再用 malloc 向系統要一塊記憶體。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ULONG status = ERROR_SUCCESS;</span><br><span class="line">TRACEHANDLE SessionHandle = <span class="number">0</span>;</span><br><span class="line">EVENT_TRACE_PROPERTIES* pSessionProperties = <span class="literal">NULL</span>;</span><br><span class="line">ULONG BufferSize = <span class="number">0</span>;</span><br><span class="line">BOOL TraceOn = TRUE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocate memory for the session properties. The memory must</span></span><br><span class="line"><span class="comment">// be large enough to include the log file name and session name,</span></span><br><span class="line"><span class="comment">// which get appended to the end of the session properties structure.</span></span><br><span class="line">    </span><br><span class="line">BufferSize = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES) + <span class="keyword">sizeof</span>(LOGFILE_PATH) + <span class="keyword">sizeof</span>(LOGSESSION_NAME);</span><br><span class="line">pSessionProperties = (EVENT_TRACE_PROPERTIES*) <span class="built_in">malloc</span>(BufferSize);    </span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pSessionProperties)</span><br><span class="line">&#123;</span><br><span class="line">    wprintf(<span class="string">L"Unable to allocate %d bytes for properties structure.\n"</span>, BufferSize);</span><br><span class="line">    <span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="配置-Session"   >          <a href="#配置-Session" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置-Session" class="headerlink" title="配置 Session"></a>配置 Session</h2>      <p>我們剛才已經將記憶體空間準備好了，現在要來設置當中的設定。<br>關於詳細的結構內容可以參考 <span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace_properties"  target="_blank" rel="noopener">EVENT_TRACE_PROPERTIES structure</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> <br>我們不需要完整設定全部的內容，除了必要的欄位，其他的欄位會在啟動時被填入預設值。</p><p>首先我們利用 ZeroMemory() 初始化這塊空間，ZeroMemory 是微軟對 memset 的封裝，將目標空間填 0。詳細請參考 <span class="exturl"><a class="exturl__link"   href="https://stackoverflow.com/questions/3038302/why-do-zeromemory-etc-exist-when-there-are-memset-etc-already"  target="_blank" rel="noopener">Why do ZeroMemory, etc. exist when there are memset, etc. already?</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>接下來開始填入 pSessionProperties 的內容。<br>EVENT_TRACE_PROPERTIES 結構中有一個 Wnode 的結構，我們必須設定它的 BufferSize、Flags 以及 Guid， ClientContext 則是選擇性的。Guid 填入我們所定義的 SessionGuid，Flags 則必須包含 WNODE_FLAG_TRACED_GUID。詳細請參考 <span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/etw/wnode-header"  target="_blank" rel="noopener">WNODE_HEADER structure</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><p>接著是 LogFileMode，設定我們要採用什麼模式去紀錄 Event tracing session，可以是記錄到 log file，也可以即時呼叫 callback，或兩者同時採用。其設定請參考 <span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/etw/logging-mode-constants"  target="_blank" rel="noopener">Logging Mode Constants</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。在範例中，EVENT_TRACE_FILE_MODE_SEQUENTIAL 代表將事件循序寫入 Log file 中，直到我們設定的檔案大小，也就是 MaximumFileSize。值得注意的是，如果我們把儲存 log file 的路徑設定在和作業系統同一個磁碟區，ETW 會另外檢查是否有 200MB 的空間可以用。即，我們設定 100MB，實際的磁碟空間要求會是 300MB。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set the session properties. You only append the log file name</span></span><br><span class="line"><span class="comment">// to the properties structure; the StartTrace function appends</span></span><br><span class="line"><span class="comment">// the session name for you.</span></span><br><span class="line"></span><br><span class="line">ZeroMemory(pSessionProperties, BufferSize);</span><br><span class="line">pSessionProperties-&gt;Wnode.BufferSize = BufferSize;</span><br><span class="line">pSessionProperties-&gt;Wnode.Flags = WNODE_FLAG_TRACED_GUID;</span><br><span class="line">pSessionProperties-&gt;Wnode.ClientContext = <span class="number">1</span>; <span class="comment">//QPC clock resolution</span></span><br><span class="line">pSessionProperties-&gt;Wnode.Guid = SessionGuid; </span><br><span class="line">pSessionProperties-&gt;LogFileMode = EVENT_TRACE_FILE_MODE_SEQUENTIAL;</span><br><span class="line">pSessionProperties-&gt;MaximumFileSize = <span class="number">1</span>;  <span class="comment">// 1 MB</span></span><br><span class="line">pSessionProperties-&gt;LoggerNameOffset = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES);</span><br><span class="line">pSessionProperties-&gt;LogFileNameOffset = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES) + <span class="keyword">sizeof</span>(LOGSESSION_NAME); </span><br><span class="line">StringCbCopy((LPWSTR)((<span class="keyword">char</span>*)pSessionProperties + pSessionProperties-&gt;LogFileNameOffset), <span class="keyword">sizeof</span>(LOGFILE_PATH), LOGFILE_PATH);</span><br></pre></td></tr></table></div></figure>        <h2 id="建立-Session"   >          <a href="#建立-Session" class="heading-link"><i class="fas fa-link"></i></a><a href="#建立-Session" class="headerlink" title="建立 Session"></a>建立 Session</h2>      <p>我們已經把 Session 的內容都寫好了，就像前面所述，Session 是由 Controller 操控，所以接下來，我們要利用 Controller 的 API 來建立、修改或啟動 Session。</p>        <h3 id="Controller-API"   >          <a href="#Controller-API" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller-API" class="headerlink" title="Controller API"></a>Controller API</h3>      <p>Controller 的 API 主要有 </p><ul><li>StartTrace()<ul><li>啟動 Session。</li></ul></li><li>ControlTrace()<ul><li>控制 Session，包括修改與中止。</li></ul></li><li>EnableTraceEx2()<ul><li>在 Windows 8.1 與 Windows Server 2012 R2 之後的版本才呼叫 EnableTraceEx2()，更之前有 EnableTrace() 及 EnableTraceEx()。</li></ul></li></ul><p>要把這個 Session 實際建立起來，直接呼叫 StartTrace，填入 TRACEHANDLE、Session name 以及我們剛剛配置好的結構 EVENT_TRACE_PROPERTIES 便可以了。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">status = StartTrace((PTRACEHANDLE)&amp;SessionHandle, LOGSESSION_NAME, pSessionProperties);</span><br><span class="line"><span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">&#123;</span><br><span class="line">    wprintf(<span class="string">L"StartTrace() failed with %lu\n"</span>, status);</span><br><span class="line">    <span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="啟動-Provider"   >          <a href="#啟動-Provider" class="heading-link"><i class="fas fa-link"></i></a><a href="#啟動-Provider" class="headerlink" title="啟動 Provider"></a>啟動 Provider</h2>      <p>我們利用 EnableTraceEx2() 將 Session 和 Provider 綁在一起，並啟動 Provider、設定要接收的事件等級，在範例中設定的是 TRACE_LEVEL_INFORMATION。詳細請參考 <span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-enabletraceex2"  target="_blank" rel="noopener">EnableTraceEx2 function</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 的 Level，總共有五個等級。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">status = EnableTraceEx2(</span><br><span class="line">    SessionHandle,</span><br><span class="line">    (LPCGUID)&amp;ProviderGuid,</span><br><span class="line">    EVENT_CONTROL_CODE_ENABLE_PROVIDER,</span><br><span class="line">    TRACE_LEVEL_INFORMATION,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">&#123;</span><br><span class="line">    wprintf(<span class="string">L"EnableTrace() failed with %lu\n"</span>, status);</span><br><span class="line">    TraceOn = FALSE;</span><br><span class="line">    <span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Cleanup"   >          <a href="#Cleanup" class="heading-link"><i class="fas fa-link"></i></a><a href="#Cleanup" class="headerlink" title="Cleanup"></a>Cleanup</h2>      <p>在 EnableTraceEx2() 傳入 EVENT_CONTROL_CODE_DISABLE_PROVIDER 將 Provider 關閉，再用 ControlTrace 傳入 EVENT_TRACE_CONTROL_STOP 關閉 Session。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (SessionHandle)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (TraceOn)</span><br><span class="line">    &#123;</span><br><span class="line">        status = EnableTraceEx2(</span><br><span class="line">            SessionHandle,</span><br><span class="line">            (LPCGUID)&amp;ProviderGuid,</span><br><span class="line">            EVENT_CONTROL_CODE_DISABLE_PROVIDER,</span><br><span class="line">            TRACE_LEVEL_INFORMATION,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="literal">NULL</span></span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    status = ControlTrace(SessionHandle, LOGSESSION_NAME, pSessionProperties, EVENT_TRACE_CONTROL_STOP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"ControlTrace(stop) failed with %lu\n"</span>, status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pSessionProperties)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>(pSessionProperties);</span><br><span class="line">    pSessionProperties = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="完整程式碼"   >          <a href="#完整程式碼" class="heading-link"><i class="fas fa-link"></i></a><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strsafe.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wmistr.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;evntrace.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGFILE_PATH <span class="meta-string">L"&lt;FULLPATHTOLOGFILE.etl&gt;"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGSESSION_NAME <span class="meta-string">L"My Event Trace Session"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GUID that identifies your trace session.</span></span><br><span class="line"><span class="comment">// Remember to create your own session GUID.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;AE44CB98-BD11-4069-8093-770EC9258A12&#125;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> GUID SessionGuid = </span><br><span class="line">&#123; <span class="number">0xae44cb98</span>, <span class="number">0xbd11</span>, <span class="number">0x4069</span>, &#123; <span class="number">0x80</span>, <span class="number">0x93</span>, <span class="number">0x77</span>, <span class="number">0xe</span>, <span class="number">0xc9</span>, <span class="number">0x25</span>, <span class="number">0x8a</span>, <span class="number">0x12</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GUID that identifies the provider that you want</span></span><br><span class="line"><span class="comment">// to enable to your session.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;D8909C24-5BE9-4502-98CA-AB7BDC24899D&#125;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> GUID ProviderGuid = </span><br><span class="line">&#123; <span class="number">0xd8909c24</span>, <span class="number">0x5be9</span>, <span class="number">0x4502</span>, &#123;<span class="number">0x98</span>, <span class="number">0xca</span>, <span class="number">0xab</span>, <span class="number">0x7b</span>, <span class="number">0xdc</span>, <span class="number">0x24</span>, <span class="number">0x89</span>, <span class="number">0x9d</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wmain</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ULONG status = ERROR_SUCCESS;</span><br><span class="line">    TRACEHANDLE SessionHandle = <span class="number">0</span>;</span><br><span class="line">    EVENT_TRACE_PROPERTIES* pSessionProperties = <span class="literal">NULL</span>;</span><br><span class="line">    ULONG BufferSize = <span class="number">0</span>;</span><br><span class="line">    BOOL TraceOn = TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate memory for the session properties. The memory must</span></span><br><span class="line">    <span class="comment">// be large enough to include the log file name and session name,</span></span><br><span class="line">    <span class="comment">// which get appended to the end of the session properties structure.</span></span><br><span class="line">    </span><br><span class="line">    BufferSize = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES) + <span class="keyword">sizeof</span>(LOGFILE_PATH) + <span class="keyword">sizeof</span>(LOGSESSION_NAME);</span><br><span class="line">    pSessionProperties = (EVENT_TRACE_PROPERTIES*) <span class="built_in">malloc</span>(BufferSize);    </span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pSessionProperties)</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"Unable to allocate %d bytes for properties structure.\n"</span>, BufferSize);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Set the session properties. You only append the log file name</span></span><br><span class="line">    <span class="comment">// to the properties structure; the StartTrace function appends</span></span><br><span class="line">    <span class="comment">// the session name for you.</span></span><br><span class="line"></span><br><span class="line">    ZeroMemory(pSessionProperties, BufferSize);</span><br><span class="line">    pSessionProperties-&gt;Wnode.BufferSize = BufferSize;</span><br><span class="line">    pSessionProperties-&gt;Wnode.Flags = WNODE_FLAG_TRACED_GUID;</span><br><span class="line">    pSessionProperties-&gt;Wnode.ClientContext = <span class="number">1</span>; <span class="comment">//QPC clock resolution</span></span><br><span class="line">    pSessionProperties-&gt;Wnode.Guid = SessionGuid; </span><br><span class="line">    pSessionProperties-&gt;LogFileMode = EVENT_TRACE_FILE_MODE_SEQUENTIAL;</span><br><span class="line">    pSessionProperties-&gt;MaximumFileSize = <span class="number">1</span>;  <span class="comment">// 1 MB</span></span><br><span class="line">    pSessionProperties-&gt;LoggerNameOffset = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES);</span><br><span class="line">    pSessionProperties-&gt;LogFileNameOffset = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES) + <span class="keyword">sizeof</span>(LOGSESSION_NAME); </span><br><span class="line">    StringCbCopy((LPWSTR)((<span class="keyword">char</span>*)pSessionProperties + pSessionProperties-&gt;LogFileNameOffset), <span class="keyword">sizeof</span>(LOGFILE_PATH), LOGFILE_PATH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the trace session.</span></span><br><span class="line"></span><br><span class="line">    status = StartTrace((PTRACEHANDLE)&amp;SessionHandle, LOGSESSION_NAME, pSessionProperties);</span><br><span class="line">    <span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"StartTrace() failed with %lu\n"</span>, status);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable the providers that you want to log events to your session.</span></span><br><span class="line"></span><br><span class="line">    status = EnableTraceEx2(</span><br><span class="line">        SessionHandle,</span><br><span class="line">        (LPCGUID)&amp;ProviderGuid,</span><br><span class="line">        EVENT_CONTROL_CODE_ENABLE_PROVIDER,</span><br><span class="line">        TRACE_LEVEL_INFORMATION,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"EnableTrace() failed with %lu\n"</span>, status);</span><br><span class="line">        TraceOn = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wprintf(<span class="string">L"Run the provider application. Then hit any key to stop the session.\n"</span>);</span><br><span class="line">    _getch();</span><br><span class="line"></span><br><span class="line">cleanup:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SessionHandle)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (TraceOn)</span><br><span class="line">        &#123;</span><br><span class="line">            status = EnableTraceEx2(</span><br><span class="line">                SessionHandle,</span><br><span class="line">                (LPCGUID)&amp;ProviderGuid,</span><br><span class="line">                EVENT_CONTROL_CODE_DISABLE_PROVIDER,</span><br><span class="line">                TRACE_LEVEL_INFORMATION,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="literal">NULL</span></span><br><span class="line">                );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        status = ControlTrace(SessionHandle, LOGSESSION_NAME, pSessionProperties, EVENT_TRACE_CONTROL_STOP);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">        &#123;</span><br><span class="line">            wprintf(<span class="string">L"ControlTrace(stop) failed with %lu\n"</span>, status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pSessionProperties)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(pSessionProperties);</span><br><span class="line">        pSessionProperties = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="結語"   >          <a href="#結語" class="heading-link"><i class="fas fa-link"></i></a><a href="#結語" class="headerlink" title="結語"></a>結語</h1>      <p>最後會得到一個 Log file，副檔名是 etl，像是這樣</p><p><img src="https://i.imgur.com/bA7cvXl.jpg" alt=""></p><p>如果有裝 Windows Performance Analyzer，就可以打開來看。圖中是收 TCP/IP 的 Event。</p><p><img src="https://i.imgur.com/B6GuX7z.jpg" alt=""></p><p>以上便是最簡單的 ETW 使用方式，在 Windows 收 Event 還有很多不同的做法，有機會再與大家分享。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為工作需求，開始接觸 Windows System Programming，每次都覺得 MSDN 寫的很混亂，有時候太注重細節，對於系統沒有全面性的介紹；有時又只有概論，沒有程式碼或實作內容；有些甚至把不同的文件連結在一起就結束了。即使是 Google 找到的資料也比日本製的壓縮機還稀少。最後只能花時間慢慢測試，聽部門的人說，有好幾次都是他們自己試出很 tricky 的用法，跟微軟的技術人員聊一聊，結果居然變成 MSDN 的內容，不知道該哭還是笑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="軟體研討" scheme="https://bclin.tw/categories/%E8%BB%9F%E9%AB%94%E7%A0%94%E8%A8%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>如何用WinDBG掛VMware</title>
    <link href="https://bclin.tw/2020/05/17/attach-windbg-on-vmware/"/>
    <id>https://bclin.tw/2020/05/17/attach-windbg-on-vmware/</id>
    <published>2020-05-17T15:07:58.000Z</published>
    <updated>2022-10-04T15:54:05.125Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Steps"   >          <a href="#Steps" class="heading-link"><i class="fas fa-link"></i></a><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1>      <ol><li>Install a Windows System in VMWare</li><li>Delete the Printer and add a new Serial Port<br><img src="https://i.imgur.com/Ir7IidC.jpg" alt=""></li><li>Add a shortcut of WinDBG.</li></ol><ul><li>Edit the target to C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\windbg.exe” -k com:port=.\pipe\com_1,baud=115200,pipe</li><li>Run as Administrator</li></ul><ol start="4"><li>Open GuestOS in VMWare, open CMD as Administrator</li></ol><ul><li>The {ID} is generated by second command<ul><li>bcdedit /dbgsettings serial baudrate:115200 debugport:1</li><li>bcdedit /copy {current} /d DebugEntry</li><li>bcdedit /displayorder {current} {ID}</li><li>bbcdedit /debug {ID} ON</li></ul></li></ul><ol start="5"><li>Restart the virtual machine and choose the DebugEntry.</li><li>Run the WinDBG in the starting process of virtual machine.</li></ol>]]></content>
    
    <summary type="html">
    
      
        &lt;h1 id=&quot;Steps&quot;&gt;
          &lt;a href=&quot;#Steps&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Steps&quot; class=&quot;headerlink&quot; title=&quot;Steps&quot;&gt;&lt;/a&gt;Steps&lt;/h1&gt;
      &lt;ol&gt;
&lt;li&gt;Install a Windows System in VMWare&lt;/li&gt;
&lt;li&gt;Delete the Printer and add a new Serial Port&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/Ir7IidC.jpg&quot; alt&gt;&lt;/li&gt;
&lt;li&gt;Add a shortcut of WinDBG.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Edit the target to C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\windbg.exe” -k com:port=.\pipe\com_1,baud=115200,pipe&lt;/li&gt;
&lt;li&gt;Run as Administrator&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Open GuestOS in VMWare, open CMD as Administrator&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;The {ID} is generated by second command&lt;ul&gt;
&lt;li&gt;bcdedit /dbgsettings serial baudrate:115200 debugport:1&lt;/li&gt;
&lt;li&gt;bcdedit /copy {current} /d DebugEntry&lt;/li&gt;
&lt;li&gt;bcdedit /displayorder {current} {ID}&lt;/li&gt;
&lt;li&gt;bbcdedit /debug {ID} ON&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="軟體研討" scheme="https://bclin.tw/categories/%E8%BB%9F%E9%AB%94%E7%A0%94%E8%A8%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>如何實作一個 aligned_alloc() ？</title>
    <link href="https://bclin.tw/2020/03/15/aligned-malloc/"/>
    <id>https://bclin.tw/2020/03/15/aligned-malloc/</id>
    <published>2020-03-15T17:05:38.000Z</published>
    <updated>2022-10-04T15:54:05.125Z</updated>
    
    <content type="html"><![CDATA[<p>因為面試被問到，所以就稍微研究了一下。</p><a id="more"></a>        <h1 id="What-is-aligned-alloc"   >          <a href="#What-is-aligned-alloc" class="heading-link"><i class="fas fa-link"></i></a><a href="#What-is-aligned-alloc" class="headerlink" title="What is aligned_alloc() ?"></a>What is aligned_alloc() ?</h1>      <figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">aligned_alloc</span><span class="params">( <span class="keyword">size_t</span> alignment, <span class="keyword">size_t</span> size )</span></span>;</span><br></pre></td></tr></table></div></figure><p>根據 cppreference，aligned_alloc() 是分配 size 位元組未初始化的存儲空間，按照 alignment 指定對齊。size 參數必須是 alignment 的整數倍。 </p>        <h1 id="Implementation"   >          <a href="#Implementation" class="heading-link"><i class="fas fa-link"></i></a><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h1>      <p>我們先用 malloc 向系統要一塊空間，但 malloc 給出來的並不是對齊的，所以一開始使用 malloc 時，要多要一點空間，確保就算偏移很多也是可以對齊。<br>一開始先要一塊空間，是 目標大小 + 對齊的量 + 一個size_t的大小。</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p1;</span><br><span class="line">p1 = (<span class="keyword">void</span> *) <span class="built_in">malloc</span>(bytes + alignment + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>))</span><br></pre></td></tr></table></div></figure><p>設想一個簡單的情況，我們要 16 Bytes 的空間以 16 Bytes 對齊，運氣好的話一開始就對齊了，運氣不好，可能偏移了 15 Bytes，我們需要額外的空間做對齊。<br>這時我們把 molloc 給我們的 address 加上偏移量與 size_t 的大小，確保我們 shift 過一個 alignment block。</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> addr = (<span class="keyword">size_t</span>) p1 + alignment + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>);</span><br></pre></td></tr></table></div></figure><p>接著把這個 address 跟偏移量做 mod 運算，取得實際偏移量，再用 address 減去偏移量，把指標往回挪，藉此得出對齊後的位址。</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p2;</span><br><span class="line">p2 = (<span class="keyword">void</span>*)(addr - (addr % alignment));</span><br></pre></td></tr></table></div></figure><p>但是，free 時我們必須用 malloc 給的記憶體位址才能把整塊都 free 掉。所以我們必須保留 p1 的記憶體位址，怎麼做呢？我們剛剛多要了一塊 size_t 的大小，於是我們把 p2（對齊的位址）往前一個 size_t 大小的位址，塞入了 p1 的位址。這樣我們之後 free 時只要呼叫這個位址，就可以 free 整塊 malloc 給我們的空間。</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*((<span class="keyword">size_t</span>*)p2 - <span class="number">1</span>) = (<span class="keyword">size_t</span>)p1;</span><br></pre></td></tr></table></div></figure>        <h1 id="Code"   >          <a href="#Code" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code" class="headerlink" title="Code"></a>Code</h1>      <figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">aligned_malloc</span><span class="params">(<span class="keyword">size_t</span> bytes, <span class="keyword">size_t</span> alignment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p1 ,*p2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((p1 = (<span class="keyword">void</span>*) <span class="built_in">malloc</span>(bytes + alignment + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>))) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">size_t</span> addr = (<span class="keyword">size_t</span>) p1 + alignment + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>);</span><br><span class="line">    p2 = (<span class="keyword">void</span>*)(addr - (addr % alignment));</span><br><span class="line"></span><br><span class="line">    *((<span class="keyword">size_t</span>*)p2 - <span class="number">1</span>) = (<span class="keyword">size_t</span>)p1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aligned_free</span><span class="params">(<span class="keyword">void</span> *p )</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span>*)(*((<span class="keyword">size_t</span>*) p - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *ptr = (<span class="keyword">int</span>*)aligned_malloc(<span class="number">1024</span>,<span class="number">12</span>);</span><br><span class="line">    aligned_free((<span class="keyword">void</span>*)ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為面試被問到，所以就稍微研究了一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="軟體研討" scheme="https://bclin.tw/categories/%E8%BB%9F%E9%AB%94%E7%A0%94%E8%A8%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>荒謬的具現化，讀卡繆的《鼠疫》</title>
    <link href="https://bclin.tw/2020/02/16/the-plague/"/>
    <id>https://bclin.tw/2020/02/16/the-plague/</id>
    <published>2020-02-16T19:10:00.000Z</published>
    <updated>2022-10-04T15:54:05.129Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h1>      <p>近來武漢肺炎一事沸沸揚揚，時至今日，我們依然奮力地抵抗病毒給人類帶來的死亡，卻也依然讓它帶走了許多無辜的生命。在歷史上，人類與疾病的戰鬥從未停止過，而病菌同時也是文明發展的關鍵因素之一。在這樣的防疫時刻，閱讀卡繆的《鼠疫》再應景不過了。</p><a id="more"></a><p>讀完《薛西弗斯的神話》後，對於卡繆所有的作品，都有了不同層次的理解。《鼠疫》一書也是一樣，表面上是一個城市遭受瘟疫侵襲而封城，醫師與志願者們進行公共衛生措施與宣導的故事，實際上卻是每個人在面臨瘟疫時，在生活中對抗荒謬的過程。</p>        <h1 id="瘟疫於個人的意義"   >          <a href="#瘟疫於個人的意義" class="heading-link"><i class="fas fa-link"></i></a><a href="#瘟疫於個人的意義" class="headerlink" title="瘟疫於個人的意義"></a>瘟疫於個人的意義</h1>      <p>在瘟疫來襲的過程中，每個人都表現出其獨特的一面。所有人一開始都不以為意，直到開始出現大量死者，市民和政府才驚覺重要性，並實施封城。封城與瘟疫帶給市民各不相同的影響，城市漸漸死寂，有些人找到了棲身之所，有些人則因失去希望而漸漸情感麻痺。卡繆正是從這裡帶入了他的哲學，瘟疫是什麼？瘟疫本身即是生活，是一切。這種普遍存在於生命中的無可戰勝的力量，即是荒繆的隱喻。</p><p>在書中，卡繆對於宗教的描述占了相當一部分的敘述。人類在面對絕望、自我的軟弱時，常尋求超然力量的協助與慰藉，宗教因而在瘟疫侵襲的市民生活中佔了一席之地。從宗教的角度來說，瘟疫是天譴，是神對人類的懲罰。那些因瘟疫而死的人，恰恰是一種贖罪，死亡讓他們得以解脫。然而，李厄醫師並不同意宗教的說法：</p><blockquote><p>「我至死也不會去愛這個使孩子們慘遭折磨的上帝的創造物。」</p></blockquote><p>主角李厄身為一名醫生，在瘟疫初期擔任了類似吹哨人的角色。李厄為了對抗瘟疫而身心憔悴，逐漸地在面對死亡時失去了情感。在醫生眼中，因疾病死亡的人是失敗的代表。不斷上升的死亡人數，在李厄眼裡即是永無止境的失敗。即使如此，李厄還是不斷地進行防疫工作，甚至成立了防疫小組，負責城市的公共衛生與防疫工作。在組建小組前，他與塔盧有一段對話：</p><blockquote><p>塔盧附和道：「是啊，我可以理解。但你的勝利永遠都只會是暫時的，就這麼簡單。」<br>李厄似乎沉下了臉。<br>「是永遠沒錯，但不能因為這樣就不再奮鬥。」<br>「對，這不是理由，但我現在可以想像這場瘟疫對你應該具有特別的意義。<br>李厄說：「是的，這是一場永無止境的失敗。」</p></blockquote><p>對於塔盧來說，這些都無關緊要，進行防疫、拯救生命為的是求得個人內心的平靜。他的思想，源自於年少時對父親工作的憧憬與失落的巨大落差，並意識到自己是死亡的間接執行者，所有死刑犯之死，自己都有責任。因而對李厄醫師說：「我於是明白了，這麼多年來雖然全心全意地認為自己在對抗著瘟疫，卻始終是個瘟疫患者。」<br>這句話暗示了之後塔盧的死亡命運，然而直到最後我們也無法得知塔盧是否得到內心的平靜。</p><p><img src="https://i.imgur.com/Or1uaR1.jpg" alt=""></p>        <h1 id="瘟疫與荒謬"   >          <a href="#瘟疫與荒謬" class="heading-link"><i class="fas fa-link"></i></a><a href="#瘟疫與荒謬" class="headerlink" title="瘟疫與荒謬"></a>瘟疫與荒謬</h1>      <p>即使是永無止境的失敗，也要不斷奮鬥，對抗瘟疫這股荒謬的力量。如同薛西弗斯，即使石頭終將滾回地面，他依然不懈地推動巨石，並在過程中取得了勝利。</p><p>卡繆在《薛西弗斯的神話》中寫道：</p><blockquote><p>「假如這則神話是個悲劇，那是因為它的主角是有意識的。…今日的工人們天天坐著相同的工作，持續一輩子一樣的命運並不會比較不荒謬。但是唯有在那罕見的有意識的時刻，它才是悲劇性的。薛西弗斯這個眾神底下的勞動者既無能為力卻又有反抗之心，他明白自己的不幸境遇；這正是他走下山時在思考的問題。清醒與明智導致了他的苦痛，卻同時讓他取得了勝利。沒有什麼命運是不能被輕蔑所戰勝的。」 </p></blockquote><p>我們就像是在瘟疫死神底下的受害者，瘟疫揮舞著巨鞭找尋下一個受害者，而我們能做的就是等待瘟疫過去，或是死亡。這是一種荒謬，也是李厄等人想反抗的命運。而到了最後，瘟疫過去，每個人都找尋到自己關於荒謬的解釋與答案。如同牧師在生病後死亡，也因他亟欲反抗「牧師看醫生」這件事情，而使得病徵「似瘟疫又非瘟疫」，這正證明了他的反抗並非沒有意義的。對每個人來說，其荒謬具現化在生命中的形式各不相同，或許無法永遠的戰勝荒謬，然而只要輕蔑命運，便也不會是永無止境的失敗。奮鬥本身就是勝利。</p>        <h1 id="節錄："   >          <a href="#節錄：" class="heading-link"><i class="fas fa-link"></i></a><a href="#節錄：" class="headerlink" title="節錄："></a>節錄：</h1>      <ul><li><p>他們自以為自由，但只要有疫災，誰都不可能自由 - p.50</p></li><li><p>打仗的時候，我們幾乎不知道什麼叫亡者。既然得親眼見到某人死亡，這個死去的人才有重量，那麼這些散布再歷史當中的一億具屍體，不過就是想像中的一縷煙罷了。 - p.50</p></li><li><p>一顆焦慮的心最大的渴望就是永不止息地擁有心愛的人，否則也希望自己不在的時候，能把對方丟入吳孟的睡眠中，直到兩人重聚的那一天為止。 - p.103</p></li><li><p>塔盧附和道：「是啊，我可以理解。但你的勝利永遠都只會是暫時的，就這麼簡單。」</p><p>  李厄似乎沉下了臉。</p><p>  「是永遠沒錯，但不能因為這樣就不再奮鬥。」</p><p>  「對，這不是理由，但我現在可以想像這場瘟疫對你應該具有特別的意義。</p><p>  李厄說：「是的，這是一場永無止境的失敗。」 - p.116</p></li><li><p>世上的惡幾乎都來自於無知，而善意假如未加以闡明，也可能和惡性一樣造成重大傷害。 - p.119</p></li><li><p>習慣於絕望比絕望本身更慘。</p></li><li><p>我於是明白了，這麼多年來雖然全心全意地認為自己在對抗著瘟疫，卻始終是個瘟疫患者。 - p.210</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;   &gt;
          &lt;a href=&quot;#前言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;
      &lt;p&gt;近來武漢肺炎一事沸沸揚揚，時至今日，我們依然奮力地抵抗病毒給人類帶來的死亡，卻也依然讓它帶走了許多無辜的生命。在歷史上，人類與疾病的戰鬥從未停止過，而病菌同時也是文明發展的關鍵因素之一。在這樣的防疫時刻，閱讀卡繆的《鼠疫》再應景不過了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>老了以後，一切都不配。閱王定國《神來的時候》</title>
    <link href="https://bclin.tw/2020/01/22/%E7%A5%9E%E4%BE%86%E7%9A%84%E6%99%82%E5%80%99/"/>
    <id>https://bclin.tw/2020/01/22/神來的時候/</id>
    <published>2020-01-22T20:18:50.000Z</published>
    <updated>2022-10-04T15:54:05.129Z</updated>
    
    <content type="html"><![CDATA[<p>王定國用這七篇短篇述說著，我們活著所追求的不過是心安而已。</p><a id="more"></a><p>人生路崎嶇，我們顛簸而行，心難安定。於是，愛情或親情所帶來的孤寂與傷痕，在年老後轉變成一個個深夜的噩夢，使我們黑夜中驚醒。有些年輕時不以為意的傷害，隨著時間卻令我們愈發不安。<br>《神來的時候》裡的每一個故事都是在彌補過去的錯誤，有的成功彌補，有的卻遺憾終身，餘生只得被悲傷包圍著度過。</p><p>老了，會對多少事物感到不配呢？《生之半途》的經理，即使暗戀公司中的陳小姐，也因害怕自己不配而無法訴說情意。卻在午休時盯著她的面容，在夢裡看著她的身體，並悲傷地說出「如果妳肯愛我，我願意答應不要活太久。」</p><p>老了，是否能彌補年輕時的遺憾？《螢火蟲》中的杏支，無論如何都要見修平教授一面，只為了兒時的情愫未了。《神來的時候》中，叔叔為了年輕時的失敗戀情，自甘墮落後又浪子回頭。</p><p>這七篇故事裡的人物，各自帶著不同的孤寂相遇、分手。王定國在每一篇故事都刻劃了一名偉大的女人。在逆境中求生，在世界背棄自己時努力活著。她們為了彌補年輕時的傷痛或守護誓言，甚至是對愛的信仰，而等待永恆與奇蹟的到來。雖只是小人物，卻綻放了希望的光芒。文明的無情帶給他們絕望，卻也使他們靈魂的苦痛得到昇華。</p><p>每次閱讀王定國的小說，總是被他的細膩筆觸所刺痛，卻又深受感動。就像之前我說過的，那是一種無言的強烈窒息，濕了眼眶卻無法痛哭的悲哀。每一篇故事都非常精煉，冷靜地描繪出小人物生命的交織。閱讀時不禁想，自己是否也會經歷這些顛簸、活出這些惆悵？若我也變成故事中的人物，豈不悲哀？每思及此，悲不自勝。</p>        <h1 id="節錄"   >          <a href="#節錄" class="heading-link"><i class="fas fa-link"></i></a><a href="#節錄" class="headerlink" title="節錄"></a>節錄</h1>      <ul><li><p>有愛才麻煩，有人就是因為曾經愛得太深才會一去不回。沒有愛就沒有苦，頂多像我現在的心這樣空蕩蕩，活著雖然就像死了，至少還能空蕩蕩地活著。  - p.36</p></li><li><p>畢竟被需要與被愛不同，被需要是一種活下去的價值，反而愛或不愛才會使人想死。 - p.40</p></li><li><p>男人的愛一旦曾經被糟蹋，他很可能就會在那種傷痛中度過殘生，而不是再去糟蹋他所不愛的女人。 - p.41</p></li><li><p>沒經歷過辛酸的女人不可能會在老後變得那樣慈祥。 - p.46</p></li><li><p>當我們想要盡全力愛一個人時，我們甚至連最卑微的也會奉獻出來。 - p.55</p></li><li><p>穿不穿襪子本來就是無關於苦難的，然而人生的苦難往往就是留下最小的象徵而成為永遠的傷痕。 - p.62</p></li><li><p>當我們承受著自己的困境時，多少還有一點餘力去關懷別人，然而一旦自己也成為了悲哀的別人，除了感傷還有什麼心情去聆聽。 - p.85</p></li><li><p>如果妳肯愛我，我願意答應不要活太久。 - p.109</p></li><li><p>啊，為什麼，人生多少困境不就因為這樣那樣的為什麼。 - p.130</p></li><li><p>他並不認為重來後的生命就能改變家庭，畢竟在那重來的家庭裡，原有的幸福還是會分配在本來的位置，而他到時候可能還是一樣現在的自己。 - p.130</p></li><li><p>一個女人不論她多天真或是多絕望，她總想要知道自己是被拋棄還是被徹底忘記。被拋棄是愛的失敗，被忘記則是愛的徒勞。 - p.176</p></li><li><p>我最大的不幸就是一直想要成為有用的人，結果到頭來反而更沒用。 - p.245</p></li><li><p>我想這或許就是溫暖的晨光所賜，使我頓悟到文學之所以必要，就是為了照亮我們每個小靈魂的苦痛和希望。 - p.258</p></li><li><p>若我能用文字裡的安靜和你緊靠心靈，我想，這就可以了，文學的憧憬不就是這樣而已的嗎？卻已足以用來面對各種文明背後的無情。 - p.258</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;王定國用這七篇短篇述說著，我們活著所追求的不過是心安而已。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>現代公民非得依靠政黨選邊站？</title>
    <link href="https://bclin.tw/2019/12/24/election-labels/"/>
    <id>https://bclin.tw/2019/12/24/election-labels/</id>
    <published>2019-12-24T16:27:50.000Z</published>
    <updated>2022-10-04T15:54:05.125Z</updated>
    
    <content type="html"><![CDATA[<p>不知不覺已屆 2019 年底，離 2020 總統大選不遠了，根據這幾年的經驗，越接近選舉，身邊的人就會越狂熱。然而，這種狂熱並不會表現在政策討論上，而是以近似於獵巫的形式來展現。每個人似乎都無法接受同溫層中出了一個異端。沒錯，我就是每兩年被抓出來的那個異端。從 2014 年的太陽花學運開始，我就一直扮演著這樣的角色。但最近實在是有點誇張了。</p><a id="more"></a>        <h1 id="人總是習慣二分法"   >          <a href="#人總是習慣二分法" class="heading-link"><i class="fas fa-link"></i></a><a href="#人總是習慣二分法" class="headerlink" title="人總是習慣二分法"></a>人總是習慣二分法</h1>      <p>會掉落二分陷阱並不是你的錯，我們或多或少都在不同狀況下掉進這個思維陷阱。即使人類建立了龐大且輝煌的文明，基因裡卻還保留著許多原始的本能。這些古老的習慣幫助我們在許多時候變得有效率，卻也讓我們在複雜的現代議題前變得無力。要克服這些思維陷阱，除了需要思想上的突破外，還需要建立思考的習慣。然而思考是相當反人性的一件事情，甚至會消耗大量的能量，也因此大多現代人不約而同地選擇放棄了高級思考的能力。</p>        <h2 id="選擇立場是一種智力的展現嗎？"   >          <a href="#選擇立場是一種智力的展現嗎？" class="heading-link"><i class="fas fa-link"></i></a><a href="#選擇立場是一種智力的展現嗎？" class="headerlink" title="選擇立場是一種智力的展現嗎？"></a>選擇立場是一種智力的展現嗎？</h2>      <p>以台灣政治的現況來說，兩黨制很大一部份促使了二分思維在人民心中根深柢固。當一個人表現出「反A」的傾向時，其他人很容易就認為這個人會「支持B」。因為對大多數人民來說，只有這兩個政黨有能力解決問題，甚至他們可能只認識這兩個政黨，對於其他小黨要不是不屑一顧，就是根本不知道有小黨的存在。</p><p>舉個例子，為什麼很多軍公教支持國民黨？其一是因為退休金被民進黨砍了，而因此討厭民進黨去支持國民黨（二分）；其二則是因為國民黨承諾會修法補回這些退休俸（利益）。</p><p>所以說，在兩黨中選一邊來站，真的是智力的展現嗎？並不然。<br>我常常在網路上看見許多用智力來侮辱對方的貼文，但其實選擇立場跟個人的深度並沒有絕對關係，而是跟個人的「利益」或「理念」有關。無論政黨或議題本身，其支持者都會有較具深度的人，也都有較思考能力較差的人（而且是大部分人），所以用選擇立場來評判智力是完全不對，而且是很侮辱自己智力的一種說法，這也是我很討厭這種說法的原因。一個人若因為害怕智力測驗沒過，而選擇抄別人的答案，不就正暴露出了他的智力不足嗎？</p>        <h2 id="立場是為了要激盪不同想法"   >          <a href="#立場是為了要激盪不同想法" class="heading-link"><i class="fas fa-link"></i></a><a href="#立場是為了要激盪不同想法" class="headerlink" title="立場是為了要激盪不同想法"></a>立場是為了要激盪不同想法</h2>      <p>不同的立場之所以需要存在，是因為我們需要透過不同的思維相互碰撞來得出更好的答案。我們並非完人，個人的思考都會有盲點，要克服思維上的盲區，需要透過與不同想法的人討論。若窩在同溫層和自己立場相同的人相互取暖，只會因此更無法接受其他想法的存在，最後成為頑固老人。</p>        <h2 id="議題和政黨的關係"   >          <a href="#議題和政黨的關係" class="heading-link"><i class="fas fa-link"></i></a><a href="#議題和政黨的關係" class="headerlink" title="議題和政黨的關係"></a>議題和政黨的關係</h2>      <p>在這個時代，社會議題的複雜程度前所未見，難以用對錯來二分。核能存續、同性戀婚姻、死刑存廢、安樂死存廢 … 我們每天面對這些沒有絕對正確與錯誤的議題，需要先花許多力氣理解議題內容，再透過大量的資料閱讀來做出選擇。然而，現代人有一個更輕鬆的方法：支持一個政黨，繼而支持這個政黨對議題的立場。</p><p>支持議題繼而支持政黨，與支持政黨而支持議題是完全不同的兩回事。</p><p>先支持議題而支持政黨，意味著你對議題有一定的理解，並且知道要透過誰去才能實現這個理想；支持政黨而支持議題，就只是意識型態作祟而已。</p>        <h1 id="所以說我是誰？"   >          <a href="#所以說我是誰？" class="heading-link"><i class="fas fa-link"></i></a><a href="#所以說我是誰？" class="headerlink" title="所以說我是誰？"></a>所以說我是誰？</h1>      <p>會寫這篇文章，也是覺得身邊的人對我誤會頗深。我通常喜歡在別人面前講他們不愛聽的話，所以常會說「你這個被國民黨洗腦的」「你這個一定是民進黨…」。<br>我很單純地只是針對不同議題有不同見解，對於能源議題，根據我唸過的書，核能在短期內是必須的。我卻很常因此被朋友或親戚說支持韓國瑜、國民黨。當我支持香港反送中、支持同性婚姻時，也曾被家人說我是被民進黨洗腦。</p><p>我只是單純地去支持我認為對的事情，大家卻不斷地往我身上貼標籤，「國民黨」、「民進黨」、「柯黑」、「中共同路人」。<br>基本上就是你們這些人太堅持自己的立場，不願意聽別人說話，才會聽到難聽話自己惱羞成怒。我不是那種因為你支持國民黨，所以在你面前說核能好棒棒；因為你支持民進黨，所以在你面前說同婚好棒棒、綠能好棒棒。我是那種知道你支持柯文哲，我就在你面前說柯文哲的公共住宅政見跳票，而且他發言很仇女；我知道你支持民進黨，我就會在你面前說強推礦業法跟潮間帶蓋風電真的很厲害。</p><p>因為如果你如果不知道我在說什麼，或是事後生氣中傷我，那就證明你一點政治素養也沒有。而身為一個現代公民，這點素養應該是基本的吧？</p><p>但很多人做不到，就像是呱吉在臉書（ <span class="exturl"><a class="exturl__link"   href="https://www.facebook.com/gameimp/posts/10157757198629641"  target="_blank" rel="noopener">https://www.facebook.com/gameimp/posts/10157757198629641</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> ） 說自己雖然和侯漢廷的立場不同，但侯很有禮貌，討論議題也是互相尊重。卻被一堆台派群起而攻之，這就是不懂的尊重彼此差異。</p><p>即使侯漢廷明顯是國民黨，但看過侯漢廷在議會質詢柯文哲的表現，難道你應該因為黨派而唾棄他嗎？即使不喜歡柯文哲，但柯文哲在面對質詢時，勇於承認自己政策施行不當，難道我們不應該給予肯定嗎？</p>        <h1 id="結論"   >          <a href="#結論" class="heading-link"><i class="fas fa-link"></i></a><a href="#結論" class="headerlink" title="結論"></a>結論</h1>      <p>我不一定是對的，我也無法肯定我是對的，有時候一個議題的對錯界線是如此模糊，我無法有效地判斷應該怎麼做。<br>但至少我可以根據手邊的資料，思考後提出質疑，如果你真的認為自己支持的議題是對的，就應該想辦法說服我，而不是將我打入敵對陣營。<br>我唯一可以肯定的是，如果你無法回答我的問題，解決我的疑慮，那你對自己正在做的事情、自己選擇立場的原因，甚至於根本上的理念，是全然不理解的。<br>真正沒過智力測驗的，就是你這種人。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不覺已屆 2019 年底，離 2020 總統大選不遠了，根據這幾年的經驗，越接近選舉，身邊的人就會越狂熱。然而，這種狂熱並不會表現在政策討論上，而是以近似於獵巫的形式來展現。每個人似乎都無法接受同溫層中出了一個異端。沒錯，我就是每兩年被抓出來的那個異端。從 2014 年的太陽花學運開始，我就一直扮演著這樣的角色。但最近實在是有點誇張了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常筆記" scheme="https://bclin.tw/categories/%E6%97%A5%E5%B8%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>做研究，僅僅有興趣夠嗎？</title>
    <link href="https://bclin.tw/2019/11/24/Intrested-and-Passionate/"/>
    <id>https://bclin.tw/2019/11/24/Intrested-and-Passionate/</id>
    <published>2019-11-24T00:20:00.000Z</published>
    <updated>2022-10-04T15:54:05.125Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在思考一件事情，就是做研究，僅僅有興趣是足夠的嗎？<br>會思考這件事情，得從為什麼我選擇做神經網路的測試方法說起。</p><a id="more"></a>        <h1 id="我的夢想"   >          <a href="#我的夢想" class="heading-link"><i class="fas fa-link"></i></a><a href="#我的夢想" class="headerlink" title="我的夢想"></a>我的夢想</h1>      <p>之前談 MIT 的時候，我曾說過我的夢想是當一名科學家。可能是科幻作品的影響，我從小就想做一些有「智慧」的東西。<br>《Portal》裡的 GLaDOS、《2001太空漫遊》的 Hal 9000、《Pluto》裡的未來機器人世界令我深深著迷。</p><p>但很早我就認清了事實並放棄這個夢想，因為至少半世紀內，這種 Artificial Intelligence (AI) 不太可能實現。原因很簡單，要製作出真正的「智慧」，不僅僅需要電腦科學領域的努力，還得仰賴諸如哲學、物理學、神經科學、腦科學、生化、生科等許多領域的極大突破。</p><p>Deep Learning 大放異彩之後，我心中燃起一線希望，這項讓電腦在圍棋上打敗人類的技術，引起我極大的興趣。雖然知道現階段的應用還離夢想很遠，但我還是去學習了相關領域的知識。</p><p>在做研究的過程中，寫程式、寫算式、訓練模型確實是很有趣，但這個 Deep Neural Network 顯然不是我要的。會意識到這件事情，還是跟女友在聊書的時候發現的。我發現我其實對腦科學和神經科學很有興趣，也常買相關的書，但就只是興趣而已，跟對 Deep Learning 的興趣是一樣的。我沒辦法再做更多。</p>        <h1 id="做研究"   >          <a href="#做研究" class="heading-link"><i class="fas fa-link"></i></a><a href="#做研究" class="headerlink" title="做研究"></a>做研究</h1>      <p>若要談論興趣，在 Computer Science 的領域中，我對於 Security 的興趣還是比較濃厚的，從小也對做一名 Hacker 有深深的嚮往。</p><p>在這幾個月做研究的過程中，我發現，對於做神經網路的研究，我居然是這麼沒有熱忱。雖然寫程式的時候覺得很好玩，但對其他的一切卻很麻木，沒有感覺，甚至有些厭煩。在寫這篇論文前，Wesley 要我思考做研究的過程中，最喜歡的和最不喜歡的，並且評價自己適不適合做研究。其實做研究的難點還是在保持初心，做著做著容易忘記自己在做什麼。對於神經網路，我缺乏最後一步的熱忱，讓我興奮的，都是思索如何能把測試和安全用在神經網路上，而不是思索神經網路缺陷的本質。</p><p>於是我發現，原來一樣是興趣，也是有分高低的。要做研究，僅僅是有興趣是不行的，還必須有熱忱。</p><p>當初會選擇做這個題目，也是希望把 Cyber Security 跟 AI 這兩個興趣做結合，結果到了年中，我開始想把重心轉往 Fuzz Testing，做程式分析和測試顯然更加乏味卻也更加有趣。不過，這個題目確實是很新穎的，指導教授興奮，我也興奮，所以還是繼續做下去，畢竟對我來說，寫這些程式並不需要花多少時間和心力。</p>        <h1 id="軟體測試與神經網路"   >          <a href="#軟體測試與神經網路" class="heading-link"><i class="fas fa-link"></i></a><a href="#軟體測試與神經網路" class="headerlink" title="軟體測試與神經網路"></a>軟體測試與神經網路</h1>      <p>結果這個研究領域才過一兩年就飽和了。<br>看了近兩年關於 Testing Neural Networks 的論文，基本上都沒有太大的變化，實用性也都還很低。看了這麼多，其實除了 Pei et al.[1] 的 DeepXplore、Tian et al.[2] 的 DeepTest 跟 Katz et al.[3] 的 Reluplex 是真的把測試和驗證帶入神經網路的領域，大多只是把傳統軟體的那套搬來用，蹭熱度趕快刷刷論文而已，少有觸及到神經網路本質之作。</p><p>比如 Gopinath et al.[4], Sun et al.[5] 就是把 Symbolic 跟 Concolic 的概念套上去，而 Guo et al.[6]、Ma et al.[7] 還有 Xie et al.[8] 都是從傳統 Fuzzing 的角度出發，提出 Coverage 的概念，並把 Coverage-Guided Fuzzing 那套拿來用。方向是正確的，但實用性其實沒那麼高。畢竟你一樣拿出 FGSM，epsilon 調到超高，Misclassification Rate 大概也接近 100% 了，哪裡還需要什麼 Coverage-Guided 呢？</p><p>我們做自動化測試、模糊測試就是為了要找到軟體的問題，要能夠 Validate 和 Verify 軟體，但 Deep Learning 就像上個世紀剛發展的軟體產業一般，漏洞百出。<br>試想，上個世紀末 Barton Miller 教授提出 Fuzz Testing 的概念時，那些 Unix 的軟體不也是漏洞百出，只要用一些隨機字串就能使重要的 API 或程式崩潰。三十年後，即使是廣為人知的 AFL 以及其延伸出的 Fuzzer 都未必能輕易地找到程式的漏洞。</p><p>可以說，我認為軟體測試和軟體的發展是相輔相成的，在神經網路還未成熟以前，軟體測試很快便走到了瓶頸。體認到這個事實的我，還是回去做資安好了。況且，人的一生要做好一件事情就已經很吃力了。</p>        <h1 id="結語"   >          <a href="#結語" class="heading-link"><i class="fas fa-link"></i></a><a href="#結語" class="headerlink" title="結語"></a>結語</h1>      <p>做了一次研究，發現又更了解了自己一點。如同 Wesley 所說，做學術研究，有很大一部分是對自己的內宇宙進行挖掘與探索。<br>它讓我知道，僅僅有興趣是不足以做研究的，若沒有激情和熱忱，以及對於自己充分的了解，研究不過是譁眾取寵，或是痛苦的深淵罷了，終究只能產出一堆廢紙。</p>        <h1 id="Reference"   >          <a href="#Reference" class="heading-link"><i class="fas fa-link"></i></a><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1>      <p>[1] Kexin Pei, Yinzhi Cao, Junfeng Yang and Suman Jana, “DeepXplore: Automated Whitebox Testing of Deep Learning Systems,” ACM Symposium on Operating Systems Principles (SOSP) 2017.<br>[2] Yuchi Tian, Kexin Pei, Suman Jana and Baishakhi Ray, “DeepTest: Automated Testing of Deep-Neural-Network-driven Autonomous Cars,” ACM/IEEE International Conference on Software Engineering (ICSE) 2018.<br>[3] Guy Katz, Clark Barrett, David Dill, Kyle Julian and Mykel Kochenderfer, “Reluplex: An Efficient SMT Solver for VerifyingDeep Neural Networks,” Computer Aided Verification (CAV) 2017.<br>[4] Divya Gopinath, Kaiyuan Wang, Mengshi Zhang, Corina S. Pasareanu and Sarfraz Khurshid, “Symbolic Execution for Deep Neural Networks,”      arXiv:1807.10439 [cs.SE].<br>[5] Youcheng Sun, Xiaowei Huang, Daniel Kroening, James Sharp, Matthew Hill and Rob Ashmore, “DeepConcolic: Testing and Debugging Deep Neural Networks,” International Conference on Software Engineering (ICSE) 2019.<br>[6] Jianmin Guo, Yu Jiang, Yue Zhao, Quan Chen and Jiaguang Sun, “DLFuzz: Differential Fuzzing Testing of Deep Learning Systems,” ESEC/FSE’2018.<br>[7] Lei Ma, Felix Juefei-Xu, Fuyuan Zhang, Jiyuan Sun, Minhui Xue, Bo Li, Chunyang Chen, Ting Su, Li Li, Yang Liu, Jianjun Zhao and Yadong Wang, “DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems,” IEEE/ACM International Conference on Automated Software Engineering (ASE 2018).<br>[8] Xiaofei Xie, Lei Ma, Felix Juefei-Xu, Hongxu Chen, Minhui Xue, Bo Li, Yang Liu, Jianjun Zhao, Jianxiong Yin and Simon See, “DeepHunter: Hunting Deep Neural Network Defects via Coverage-Guided Fuzzing,” arXiv:1809.01266 [cs.SE].</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在思考一件事情，就是做研究，僅僅有興趣是足夠的嗎？&lt;br&gt;會思考這件事情，得從為什麼我選擇做神經網路的測試方法說起。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常筆記" scheme="https://bclin.tw/categories/%E6%97%A5%E5%B8%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>新的網站</title>
    <link href="https://bclin.tw/2019/10/26/new-blog-2019-10/"/>
    <id>https://bclin.tw/2019/10/26/new-blog-2019-10/</id>
    <published>2019-10-26T13:57:50.000Z</published>
    <updated>2022-10-04T15:54:05.129Z</updated>
    
    <content type="html"><![CDATA[<p>好幾年沒有更新部落格的版面了，這幾天卻突然有強烈的慾望來做這件事情。主要是仲軒幫實驗室換網站，我建議乾脆直接用 Hexo，方便使用，自己也乾脆來整理自己的網站。掃去了舊伺服器和系統上的蜘蛛網，順便接觸新技術，就像是我的人也脫胎換骨一般清爽。</p><a id="more"></a><p>這次把部落格從原來的 WordPress 轉到 Hexo 有幾個原因</p><ol><li>WordPress 太肥</li></ol><p>WP 系統雖然方便，資源也很多，但實在有很多我用不到的功能，我只需要寫寫文章的功能就好。WP 對我來說就像是一把牛刀，我平常用不到。</p><ol start="2"><li>伺服器</li></ol><p>用 WP 的時候，我需要租一台主機來用，原來放在 DigitalOcean 上，雖然不是太貴（USD$5/month），但總歸還是一筆開銷。<br>另外，Server 管理並非我的強項，一旦遭遇問題，我需要花很多時間排除。更麻煩的是，遭受攻擊時，我的反應能力很差。以前曾經被攻擊過一次，DB 都被清掉，花我很多時間在做 Recover。</p><p>Hexo 因為是靜態，幾乎沒有什麼洞可以利用，放在 GitHub Pages 上，我也不用營運伺服器，搭配 Travis CI 做持續整合，輕鬆。</p><ol start="3"><li>Markdown</li></ol><p>Hexo 是用 Markdown 寫作，再編成 HTML，這樣確保了文章的規格一致。以往用 MCE 最大的問題就是我無法確定我的 字體大小、字型、格式 是否都統一。更要命的是複製其他網站的文字時，可能會不小心把 HTML 也複製進來。排版上也複雜得多。Markdown 完全免除了這些困擾。</p><ol start="4"><li>效能</li></ol><p>靜態頁面不用說，快到飛天。</p><p>當然，也是有缺點的，現在發現最大的問題就是 deploy 實在很慢，尤其是有圖片的時候，在 Travis 上面必須要作 Clean 的動作，意味著沒有快取可以增加部屬的速度。但目前我還可以接受，圖片都外連的情況下，三十篇文章部屬四分鐘左右。<br>另外，我沒有辦法隨時隨地更改網站內容，每一次更改都要 git pull，改完後又 git push，像我有很多台電腦，就變得麻煩一些。</p><p>不過，總歸把自己的部落格作了一番改進，一些老文章也清掉了。</p><p>今年四月後就沒有繼續寫文了，後台裡躺了很多未完成的草稿。其實是不應該這樣的，但就是沒有寫作的心情，明明讀了很多書，也作了很多思考，但遲遲未把這些思想轉化成文字。這是一件危險的事，代表我過度依賴自己的腦袋。</p><p>距離上次發文也半年多了，半年，說起來是很短的時間，卻佔了我碩士生活的三分之一。半年前交往的女友也分手了，半年前曾有交集的女生也斷訊了，半年來發生了太多太多事情。我覺得我變了很多，變得更踏實了一些，也多了點思想上的突破。但我還是難以抓住自己的核心，大學時我以為我可以，研究所時發現都是假象。但為什麼需要抓住自己的核心呢？我也不清楚，只希望能多理解迷一般的自我的潛意識。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好幾年沒有更新部落格的版面了，這幾天卻突然有強烈的慾望來做這件事情。主要是仲軒幫實驗室換網站，我建議乾脆直接用 Hexo，方便使用，自己也乾脆來整理自己的網站。掃去了舊伺服器和系統上的蜘蛛網，順便接觸新技術，就像是我的人也脫胎換骨一般清爽。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常筆記" scheme="https://bclin.tw/categories/%E6%97%A5%E5%B8%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>這個幻想世界是對中國最犀利的批判，談余華《第七天》</title>
    <link href="https://bclin.tw/2019/04/19/the-seventh-day/"/>
    <id>https://bclin.tw/2019/04/19/the-seventh-day/</id>
    <published>2019-04-19T11:52:45.000Z</published>
    <updated>2022-10-04T15:54:05.129Z</updated>
    
    <content type="html"><![CDATA[<p>《第七天》是余華在 2013 年的長篇作品，我雖不能算是余華迷，但也讀過幾本名作《活著》、《許三觀賣血記》、《在細雨中呼喊》，甚至是一些中短篇 — 帶有實驗小說色彩 — 的作品，像是《現實一種》、《十八歲出門遠行》、《空中爆炸》… 族繁不及備載。在書展看見繁體版的《第七天》，想著一定要看一下這本評價非常兩極的書，便把它帶回家了。</p><a id="more"></a><p>《第七天》描述主角楊飛死後七天所看見的故事，透過死後的視覺所看見的，是充滿情感卻只能袖手旁觀的冷靜。這七天中，楊飛偶爾回想了生前所遇見的種種事件，感覺上像是很嫻熟的意識流技巧；在死後世界所遇見的種種，包括世界本身的這個設定既有趣又富有中國味。</p><p>約翰說：「對任何人都平等的，唯有死而已。」<br>余華則告訴我們：「即使死了也得不到平等，而平等卻在死無葬身之地。」</p><p><img src="https://i.imgur.com/ZqLRNLM.jpg" alt=""></p><p>余華透過一連串發生在主角身邊的事件，來諷刺許多中國現況的荒謬，在生死邊界所看見的那些警察暴力、政治壓迫、金錢消費主義所引起的種種悲劇，蓋住了人性最燦爛光輝的那一面，讓整個世界變得烏煙瘴氣。余華在描寫主角與父親的親情時，至親至情，感人熱淚，有種《活著》和《許三觀賣血記》的影子；描寫起暴力和荒謬，又帶了點《現實一種》和《十八歲出門遠行》的味道，然而諷刺沒有問題，問題在於，敘事的著力點不太平衡。余華花了很大的篇幅在談楊飛與父親是沒有問題的，但最後段把重點放在鼠妹的愛情，稍顯冗餘，讓我讀來感到些許疲憊。</p><p>不難想像那些批評余華的人有何感受，這就像是國家的光鮮亮麗外表被扒開了 — 一個血淋淋的現實 — 任誰都難以忍受。但是，若不能接受自己的荒誕、悲慘以及罪惡，人是不會進步的。在這一點上，余華可謂超越了當代的很多中國人，他筆法犀利得溫暖，從第一次看《許三觀賣血記》時我就這樣感覺到了，余華並非從《第七天》才批評中國，早在他確立到自己長篇小說的風格時，他就不斷寫著那些中國小人物，那些在大時代的洪流下咬牙生存的小人物，並且向他們學習。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第七天》是余華在 2013 年的長篇作品，我雖不能算是余華迷，但也讀過幾本名作《活著》、《許三觀賣血記》、《在細雨中呼喊》，甚至是一些中短篇 — 帶有實驗小說色彩 — 的作品，像是《現實一種》、《十八歲出門遠行》、《空中爆炸》… 族繁不及備載。在書展看見繁體版的《第七天》，想著一定要看一下這本評價非常兩極的書，便把它帶回家了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="余華" scheme="https://bclin.tw/tags/%E4%BD%99%E8%8F%AF/"/>
    
  </entry>
  
  <entry>
    <title>《論文筆記》DeepHunter: Hunting Deep Neural Network Defects via Coverage-Guided Fuzzing</title>
    <link href="https://bclin.tw/2019/03/18/paper-deephunter/"/>
    <id>https://bclin.tw/2019/03/18/paper-deephunter/</id>
    <published>2019-03-18T19:30:08.000Z</published>
    <updated>2022-10-04T15:54:05.129Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="論文資訊"   >          <a href="#論文資訊" class="heading-link"><i class="fas fa-link"></i></a><a href="#論文資訊" class="headerlink" title="論文資訊"></a>論文資訊</h1>      <ul><li>標題：DeepHunter: Hunting Deep Neural Network Defects via Coverage-Guided Fuzzing </li><li>作者：Xiaofei Xie, Lei Ma, Felix Juefei-Xu, Hongxu Chen, Minhui Xue, Bo Li, Yang Liu, Jianjun Zhao, Jianxiong Yin, Simon See </li><li>機構：Nanyang Technological University、Harbin Institute of Technology、Carnegie Mellon University、University of Illinois at Urbana–Champaign、Kyushu University、NVIDIA AI Technology Center </li><li>會議/期刊：None 連結：<span class="exturl"><a class="exturl__link"   href="https://arxiv.org/abs/1809.01266"  target="_blank" rel="noopener">https://arxiv.org/abs/1809.01266</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>   <a id="more"></a>在傳統軟體測試領域，我們很常用一些自動化測試來產生測資並進行測試，進而找出漏洞，最後產生報告供測試人員分析。其中有一種測試方式叫做 Fuzz Testing（Fuzzing），意思就是模糊測試。這篇論文便是以同樣的概念對深度神經網路進行測試，由於作者同時也是 DeepGauge 的研究群，他們引用了自己在 DeepGauge 中提出的神經網路覆蓋率指標，在這邊論文提出了 Coverage-Guided Fuzzing，以程式碼覆蓋率為 feedback 去有效率地產生大量模糊測試的測資。這在傳統軟體測試領域是很常見的策略，像是 AFL、libFuzxer 及 VUzzer 就是 coverage based 的 Fuzzer。<br>基本上，一個 CGF 應該要進行有以下的 Loop：</li></ul><ol><li>從 Seed pool 裡面選擇 seed</li><li>利用特定修改策略（像是bitwise/bytewise flip），多次修改種子去產測資</li><li>用產出來的測資去跑目標程式，紀錄執行路徑</li><li>回報產生錯誤的種子，把那些覆蓋到不同路徑的種子存進 seed pool（提升覆蓋率的種子）</li></ol><p>重點有兩個：修改策略、覆蓋率，前者注重是如何產生新的、有效率的種子，後者則是評斷種子優劣的標準。<br>這是這篇論文提出的 DeepHunter 的流程圖。<br> <a href="https://i.imgur.com/XKDG2DM.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/XKDG2DM.jpg" alt=""></a> </p><p>文中定義一個 atomic 輸入為一個種子，一個 batch 指的則是一堆圖片。為什麼是用 Batch Pool，是因為作者認為一次修改一定數量的種子，然後讓 DNN 一次去做辨識會比較有效率。另外，為了把有「潛力」 的種子往前推，會進行一個 Power scheduling 的動作；為了避免製作出沒有意義的種子，會在修改後進行 Sanity checking。最後進行完 Coverage Analysis 後，會做一個 Batch Prioritization 的動作讓很少被選到修改的 Batch 優先權往前提升。 </p><p><a href="https://imgur.com/RR6SBtO.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/RR6SBtO.jpg" alt=""></a> </p>        <h1 id="3-2-轉換與修改（Transformation-and-Mutation）"   >          <a href="#3-2-轉換與修改（Transformation-and-Mutation）" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-轉換與修改（Transformation-and-Mutation）" class="headerlink" title="3.2 轉換與修改（Transformation and Mutation）"></a>3.2 轉換與修改（Transformation and Mutation）</h1>      <p>傳統 fuzzer 像是 AFL 用的策略產出的測資，對於 DNN 來說會是沒有意義的；而在改動大小和產出有意義測資之間要取得平衡是很難。 所以作者想出了一種圖像變換的策略，稱為 metamorphic mutation strategy，意思就是說，我改動你這個種子，但產生出來的測資的 semantic（語意）必須和原來是一樣的。 對於影像進行變化的方法被分為兩種：</p><ul><li>Pixel Value transformation P<ul><li>對比度</li><li>量度</li><li>模糊</li><li>雜訊</li></ul></li><li>Affine transformation G<ul><li>影像翻譯</li><li>影像縮放</li><li>影像斜變</li><li>影像旋轉</li></ul></li></ul><p>為了避免產出無意義的測資，Affine transformation 只能做一次；Pixel Value transformation 則可以做多次，但會計算 L0 和 L∞ 來限制改變大小。<br>假定 I 透過 pixel value transformation 被改成 I’，那我們說在 f(I,I’) 成立時 I’ 是 有意義的。 </p><p><a href="https://i.imgur.com/31qN9LO.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/31qN9LO.jpg" alt=""></a> </p><p>L0 指的是 pixel 最大改變量，size(I) 則是圖片的 pixel 數量。作者假定如果改動的 pixel 很小，小於 a x size(I) 時語意不受影響。萬一超過了，那只要不要改超過 b x 255 就好了。 </p><p><a href="https://imgur.com/h2kIbh2.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/h2kIbh2.jpg" alt=""></a></p><p><a href="https://imgur.com/gIVr9zN.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/gIVr9zN.jpg" alt=""></a><br>Algorithm 2 是修改的過程，I 是 Input 而 I’ 是 output。state 是一個 bool，用來記錄 Affine Transformation 是否被使用過了。作者表示他們想在產生有意義的測資時，盡可能最大化修改的次數，也就是 TRY_NUM。如果 state 目前是 0，就隨機挑選一種修改方式，如果是 1，那就挑 Pixel Value Transformation，參數則是隨機。</p>        <h1 id="3-3-Power-Scheduling"   >          <a href="#3-3-Power-Scheduling" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-Power-Scheduling" class="headerlink" title="3.3 Power Scheduling"></a>3.3 Power Scheduling</h1>      <p>用mutation potential來計算可以修改的空間。公式是 B x 255 x size(I) - sum(abs(I-I’0)) mutation potential 越大，代表越接近種子，而且會被更優先修改。  </p>        <h1 id="3-4-Plugable-Coverage-Guided-Fuzzing"   >          <a href="#3-4-Plugable-Coverage-Guided-Fuzzing" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4-Plugable-Coverage-Guided-Fuzzing" class="headerlink" title="3.4 Plugable Coverage-Guided Fuzzing"></a>3.4 Plugable Coverage-Guided Fuzzing</h1>      <p><a href="https://imgur.com/7QvOHVU.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/7QvOHVU.jpg" alt=""></a><br>DeepHunter 用了六種不同的 coverage criteria 去看哪一個 batch 要被留著。但是如果一直收 coverage，程式會不堪負荷，為了加速，會把一些得到差不多輸出的 seed 忽略掉，不必特別保留 coverage 的值。並用了 bucket 的機制來避免 trace exploitation issue，跟傳統 fuzzing framework 很像。 </p>        <h1 id="3-5-Batch-Prioritization-調整每一個-Batch-被挑選到的機率，機率的公式是"   >          <a href="#3-5-Batch-Prioritization-調整每一個-Batch-被挑選到的機率，機率的公式是" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-5-Batch-Prioritization-調整每一個-Batch-被挑選到的機率，機率的公式是" class="headerlink" title="3.5 Batch Prioritization 調整每一個 Batch 被挑選到的機率，機率的公式是"></a>3.5 Batch Prioritization 調整每一個 Batch 被挑選到的機率，機率的公式是</h1>      <p><a href="https://imgur.com/RWrlq0O.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/RWrlq0O.jpg" alt=""></a><br>避免總是有趣的 Batch 被挑選，其他 Batch 依然有 Pmin 作為最低機率。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;論文資訊&quot;   &gt;
          &lt;a href=&quot;#論文資訊&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#論文資訊&quot; class=&quot;headerlink&quot; title=&quot;論文資訊&quot;&gt;&lt;/a&gt;論文資訊&lt;/h1&gt;
      &lt;ul&gt;
&lt;li&gt;標題：DeepHunter: Hunting Deep Neural Network Defects via Coverage-Guided Fuzzing &lt;/li&gt;
&lt;li&gt;作者：Xiaofei Xie, Lei Ma, Felix Juefei-Xu, Hongxu Chen, Minhui Xue, Bo Li, Yang Liu, Jianjun Zhao, Jianxiong Yin, Simon See &lt;/li&gt;
&lt;li&gt;機構：Nanyang Technological University、Harbin Institute of Technology、Carnegie Mellon University、University of Illinois at Urbana–Champaign、Kyushu University、NVIDIA AI Technology Center &lt;/li&gt;
&lt;li&gt;會議/期刊：None 連結：&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://arxiv.org/abs/1809.01266&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://arxiv.org/abs/1809.01266&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;
    
    </summary>
    
    
      <category term="論文筆記" scheme="https://bclin.tw/categories/%E8%AB%96%E6%96%87%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>溫暖幸福的愛情故事，三島由紀夫《潮騷》</title>
    <link href="https://bclin.tw/2019/03/13/shiosai/"/>
    <id>https://bclin.tw/2019/03/13/shiosai/</id>
    <published>2019-03-13T16:47:50.000Z</published>
    <updated>2022-10-04T15:54:05.129Z</updated>
    
    <content type="html"><![CDATA[<p>《潮騷》是三島由紀夫筆下少有的陽光、明亮、溫暖的作品，那一年，他 29 歲。</p><a id="more"></a><p>根據我查到的資料，三島曾說：「《潮騷》是以《塔夫尼斯與克蘿婀》為藍本，去尋覓被文明隔絕，卻瀰漫著淳樸美學的小島。」<br>《塔夫尼斯與克蘿婀》是古希臘晚期作家朗戈斯田園詩式的愛情小說，全書著墨刻劃主角戀愛中的歡樂和痛苦，甚且謳歌樸素和真摯的愛情；而《潮騷》則對應男主角新治的苦難生活和愛情歷程，挑動讀者的心弦。」</p><p>是的，在《潮騷》當中，你可以看到許多愛情作品的套路，深愛彼此的男女、家庭門第的不對等、父親的反對、第三者 … 等等，但在三島筆下，這樣的作品要比那些愛情小說多了些靈魂，三島描繪並歌頌了一個純樸的小島，島上有純樸的人民，過得艱苦但知足、快樂的生活。在與自然相處融洽的關係下生活著，在艱苦的環境下養成了刻苦的靈魂與堅實的肉體，這一向是三島喜愛的。作品本身則是非常淺顯易懂的，沒有多餘的隱諱暗示，或是任何過於陰暗的陳述。就是一個明亮溫暖的、揪心的愛情故事。</p><p>故事的背景是在日本三重縣鳥羽市的歌島，現在叫做神島，讀完《潮騷》，實在是很想去島上住個兩三天，度過與高度文明隔絕的樸實生活。我查了一下神島上的燈塔，想知道那是什麼地方，沒想到還真的有。（來源維基百科） </p><p><img src="https://imgur.com/TuQD5Ti.jpg" alt=""> </p>        <h1 id="節錄"   >          <a href="#節錄" class="heading-link"><i class="fas fa-link"></i></a><a href="#節錄" class="headerlink" title="節錄"></a>節錄</h1>      <ul><li><p>眼下，她最明顯的成就，就是在東京接受大學教育，是個有教養的人。但是，人們常以貌取人，如此深思其貌不揚，也許同深思其貌標致是同樣過份的吧。</p></li><li><p>千代子一直相信自己認定自己醜陋的臉的校驗。這一執念一旦固化，就比漂亮的臉蛋更能巧妙地騙取感情。確信醜陋，就是處女所相信的石膏。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《潮騷》是三島由紀夫筆下少有的陽光、明亮、溫暖的作品，那一年，他 29 歲。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>無言的強烈窒息《那麼熱，那麼冷》</title>
    <link href="https://bclin.tw/2019/03/13/%E9%82%A3%E9%BA%BC%E5%86%B7%E9%82%A3%E9%BA%BC%E7%86%B1/"/>
    <id>https://bclin.tw/2019/03/13/那麼冷那麼熱/</id>
    <published>2019-03-13T14:54:50.000Z</published>
    <updated>2022-10-04T15:54:05.129Z</updated>
    
    <content type="html"><![CDATA[<p>第一次看到王定國這個名字，是很久很久以前在友人的臉書貼文上，我已經忘記他說的是哪一本書，僅僅記得他對王定國讚譽有佳。</p><a id="more"></a><p>去年台北書展時我考慮了很久是否要買他的作品，最後卻作罷，今年同樣是書展，在印刻看到王定國立刻就買了，挑了一本《那麼熱，那麼冷》。說實話，倒也忘記為什麼是挑這本，而不是其他本，諸如《敵人的櫻花》、《誰在暗中眨眼睛》。現在回想起來，我感覺是有原因的，是一個堅定的理由，一種刻畫在血液裡的命運，但我現在是真的不知道為什麼。</p><p>原來是要先看《千年繁華》，但不知怎的還是把《那麼熱，那麼冷》塞進背包裡，在一個失眠的夜裡看到失眠，哭沒有眼淚的泣，搞不清楚是因為失眠而看書，或是因為看書而失眠。</p><p>這是一篇中短篇小說集，一共五篇，分別是《某某》、《落英》、《我的杜斯妥》、《那麼熱，那麼冷》、《世人皆蠢》。每一篇中都有一個男人訴說自己故事，和朋友、和家庭、和自己、和社會、和人生奮鬥的過程，他們都是那麼的努力，也都是萬般的無奈，無論看起來是光鮮亮麗或是平庸、甚至是悲慘，他們心裡或多或少有一些遺憾，像是一個疤痕刻畫在心上，一輩子無法痊癒，偶爾還會滲出血來。</p><p>王定國描繪出的氛圍是多麼冷靜與犀利，時時切中要害，讓讀者也跟著濡濕了眼眶，卻又難以哭出淚，就像是無聲的吶喊，被緊掐著脖子般難受，卻也無法發出聲音，梗在喉頭最後又吞了回去。我無法讀得很快，因為害怕自己會窒息。</p>        <h1 id="節錄"   >          <a href="#節錄" class="heading-link"><i class="fas fa-link"></i></a><a href="#節錄" class="headerlink" title="節錄"></a>節錄</h1>      <ul><li><p>「他慢慢體會到，也許這就夠了，每個人一生中都有一個戀人，即便永遠不再出現，但也永遠不會消失。」 - 《某某》</p></li><li><p>「一個人為了追求理念而竟陷入彷如自我毀滅的境界，這種精神多麼令我動容。」 - 《落英》</p></li><li><p>「過了這個彎就好。過了下個彎就會沒事的。人生道路總有幾個彎吧，我還不曾見過有人一路直走就能贏得眾多的喝采。」 - 《落英》</p></li><li><p>「我相信世上每個人都有一個傷心的所在，不論在心裡或在遠方。不幸我兩者都有。」 - 《我的杜斯妥》</p></li><li><p>「然而在那無言的當下，一個人倘若還能細膩倒選好舒服的臥姿倒下，那麼，他應該還有一些想法來度過各種困境吧。」 - 《那麼熱，那麼冷》</p></li><li><p>「要是人人精得像妖精，這個人生世界裡為什麼還有那麼多不堪的殘局。」 - 《世人皆蠢》</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次看到王定國這個名字，是很久很久以前在友人的臉書貼文上，我已經忘記他說的是哪一本書，僅僅記得他對王定國讚譽有佳。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>《論文筆記》DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems</title>
    <link href="https://bclin.tw/2019/03/03/paper-deepgauge/"/>
    <id>https://bclin.tw/2019/03/03/paper-deepgauge/</id>
    <published>2019-03-03T13:48:06.000Z</published>
    <updated>2022-10-04T15:54:05.129Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="論文資訊"   >          <a href="#論文資訊" class="heading-link"><i class="fas fa-link"></i></a><a href="#論文資訊" class="headerlink" title="論文資訊"></a>論文資訊</h1>      <ul><li>標題：DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems </li><li>作者：Lei Ma, Felix Juefei-Xu, Fuyuan Zhang, Jiyuan Sun, Minhui Xue, Bo Li, Chunyang Chen, Ting Su, Li Li, Yang Liu, Jianjun Zhao, Yadong Wang </li><li>會議/期刊：ASE 2018 </li><li>備註：ACM SIGSOFT Distinguished Paper Award </li><li>連結：<span class="exturl"><a class="exturl__link"   href="https://arxiv.org/abs/1803.07519"  target="_blank" rel="noopener">https://arxiv.org/abs/1803.07519</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>   </li><li>這篇論文主要是提出了一種新型態的 Neural Network Coverage（神經網路覆蓋率），不同於 DeepXplore[1] 所提出的版本。</li></ul><a id="more"></a><ul><li><strong>Notation</strong><ul><li>Let N = {n1,n2, . . .} be a set of neurons of a DNN</li><li>Let T = {x1, x2, . . .} be a set of test inputs</li><li>Use ϕ(x,n) to denote a function that returns the output of a neuron n ∈ N under a given test input x ∈ T</li><li>Let Li denote the set of neurons on the i-th layer (1 ≤ i ≤ l )</li><li>For a neuron n, let highn and lown be its upper and lower boundary output values, respectively, on the value range of its activation function, where highn and lown are derived from the training dataset analysis.</li></ul></li><li>Neuron-Level Coverage Criteria以神經元為單位計算覆蓋率<ol><li><strong>Major function region coverage</strong><ul><li>在測試集的時候把所有的神經元的最高和最低輸出都抓出來。</li></ul></li><li>K-multisection Neuron Coverage（KMNC）<ul><li>把每一個神經元的輸出最低到最高切出 k 個section</li><li>k-multisection Neuron Coverage of a neuron n<ul><li><img src="https://imgur.com/RzdQdgZ.jpg" alt=""></li></ul></li><li>k-multisection Neuron Coverage of a DNN<ul><li><img src="https://imgur.com/HYUqTqZ.jpg" alt=""></li></ul></li></ul></li><li>Neuron Boundary Coverage（NBC）<ul><li>把負無限大到最低值 跟 最高值到無限大之間的輸出都歸類在這裡</li><li>UpperCornerNeuron = {n ∈ N | ∃x ∈ T : ϕ(x,n) ∈ (highn, +∞)}</li><li>LowerCornerNeuron = {n ∈ N | ∃x ∈ T : ϕ(x,n) ∈ (−∞, lown)}</li><li><img src="https://imgur.com/zheL4xe.jpg" alt=""></li></ul></li><li>Strong Neuron Activation Coverage<ul><li>只看 UpperCornerNeuron 的輸出</li><li><img src="https://imgur.com/EJ8ynGq.jpg" alt=""></li></ul></li></ol></li><li>Layer-Level Coverage Criteria以階層為單位計算覆蓋率<ol><li>Top-k Neuron Coverage<ul><li>每一層神經元輸出數值排出 Top-k，最後計算曾經變成 Top-k 的神經元數量，除以總神經元數量</li><li><img src="https://imgur.com/1iNkdll.jpg" alt=""></li></ul></li><li>Top-k Neuron Patterns<ul><li>把輸出 Top-k 的路徑記作一個 Pattern，計算總共有幾種 Pattern</li><li><img src="https://imgur.com/xqKGH6j.jpg" alt=""></li></ul></li></ol></li></ul>        <h1 id="Evaluation"   >          <a href="#Evaluation" class="heading-link"><i class="fas fa-link"></i></a><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h1>      <ul><li>產生的樣本、DNN model 的參數跟覆蓋率的設定</li></ul><p><a href="https://imgur.com/GDoPm0C.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/GDoPm0C.jpg" alt=""></a></p><p><a href="https://imgur.com/fpEIluF.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/fpEIluF.jpg" alt=""></a>  </p><p><a href="https://imgur.com/UeLUv6H.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/UeLUv6H.jpg" alt=""></a> </p>        <h1 id="Findings"   >          <a href="#Findings" class="heading-link"><i class="fas fa-link"></i></a><a href="#Findings" class="headerlink" title="Findings"></a>Findings</h1>      <ol><li>無論如何，Adv樣本都會觸及到邊界。</li><li>增加覆蓋率不代表會找到問題。</li><li>SNAC 比 NBC 高，可能是因為 ReLU 把負數砍成零，所以 Lower Bound 小很多。</li></ol>        <h2 id="Remark-1"   >          <a href="#Remark-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Remark-1" class="headerlink" title="Remark 1"></a>Remark 1</h2>      <ol><li>對於 NBC 跟 SNC 來說，上下界設的越寬，覆蓋率增加越少（因為範圍被壓縮了）</li><li>對於 TKNC 來說，K越大，覆蓋率增加越少</li><li>對 TKNP 來說，K越大，Pattern 越多</li></ol>        <h2 id="Remark-2"   >          <a href="#Remark-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Remark-2" class="headerlink" title="Remark 2"></a>Remark 2</h2>      <ol><li>對 NBC 跟 SNAC 來說，對抗例樣本會增加他們的覆蓋率，反過來說，觸及邊界的很有可能就是對抗例樣本。</li><li>用 CW 攻擊產生的對抗例樣本對增加覆蓋率影響不大。</li></ol>        <h1 id="Reference"   >          <a href="#Reference" class="heading-link"><i class="fas fa-link"></i></a><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1>      <p>[1] Kexin Pei, Yinzhi Cao, Junfeng Yang, Suman Jana, “DeepXplore: Automated Whitebox Testing of Deep Learning Systems,” SOSP 2017.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;論文資訊&quot;   &gt;
          &lt;a href=&quot;#論文資訊&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#論文資訊&quot; class=&quot;headerlink&quot; title=&quot;論文資訊&quot;&gt;&lt;/a&gt;論文資訊&lt;/h1&gt;
      &lt;ul&gt;
&lt;li&gt;標題：DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems &lt;/li&gt;
&lt;li&gt;作者：Lei Ma, Felix Juefei-Xu, Fuyuan Zhang, Jiyuan Sun, Minhui Xue, Bo Li, Chunyang Chen, Ting Su, Li Li, Yang Liu, Jianjun Zhao, Yadong Wang &lt;/li&gt;
&lt;li&gt;會議/期刊：ASE 2018 &lt;/li&gt;
&lt;li&gt;備註：ACM SIGSOFT Distinguished Paper Award &lt;/li&gt;
&lt;li&gt;連結：&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://arxiv.org/abs/1803.07519&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://arxiv.org/abs/1803.07519&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/li&gt;
&lt;li&gt;這篇論文主要是提出了一種新型態的 Neural Network Coverage（神經網路覆蓋率），不同於 DeepXplore[1] 所提出的版本。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="論文筆記" scheme="https://bclin.tw/categories/%E8%AB%96%E6%96%87%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
</feed>
